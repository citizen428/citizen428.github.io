<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rubinius | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/rubinius/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2012-04-15T15:13:37+02:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby implementations and why we should care]]></title>
    <link href="http://citizen428.net/blog/2009/03/12/ruby-implementations-and-why-we-should-care/"/>
    <updated>2009-03-12T00:00:00+01:00</updated>
    <id>http://citizen428.net/blog/2009/03/12/ruby-implementations-and-why-we-should-care</id>
    <content type="html"><![CDATA[<p>Not too lang ago our "favorite language":http://www.ruby-lang.org/en/ had only implementation, the one made by "Matz":http://en.wikipedia.org/wiki/Yukihiro_Matsumoto (now commonly referred to as MatzRuby or MRI). This has changed quite a lot lately, so I decided to give you an overview of the various Ruby interpreters I use, why I use them and why they also might be interesting for you.</p>

<ul>
<li>Ruby 1.8.6: This is your trusted old Ruby 1.8.6, and while it may not be the most spectacular of the implementations listed here, it's the most widely used Ruby interpreter around and the current de facto standard of the language.</li>
<li>Ruby 1.9.1: Featuring the new bytecode interpreter "YARV":http://en.wikipedia.org/wiki/YARV, this is the newest 'official' Ruby version which gives us interesting features like improved speed, block local variables, a "new lambda syntax":http://pragdave.blogs.pragprog.com/pragdave/2008/05/new-lambda-synt.html, native threads and some other niceties. So while we are waiting for 1.9.1 to replace 1.8.6 as the standard Ruby interpreter (which probably will take quite a while), my advice is to install it now, play around with it, get used to the new things and <a href="http://isitruby19.com/">help the community in porting gems to 1.9</a>.</li>
<li>"JRuby":http://jruby.codehaus.org/: A Java implementation of Ruby, which allows developers to interact with Java classes or define them from within Ruby. It's fast, it works well, and is a big driving force in the filed of alternative Ruby interpreters. As of now I mostly used JRuby from within "ruby-processing":, but eventually want to have a look at "Monkeybars":http://monkeybars.rubyforge.org/, which  was created in order to simplify the development of "Swing":http://en.wikipedia.org/wiki/Swing_(Java) apps with JRuby.</li>
<li>"Rubinius":http://rubini.us/: Here is what the project itself has to say about its relevance for Ruby developers: <i>"A spec driven Ruby implementation. A core library written in Ruby. More first class objects than you can shake a stick at. Super easy to contribute. Low barrier to entry. If you can breathe, you can commit</i>". So far I only used Rubinius to test some of my own scripts, but eventually would like to find the time to contribute to the project by writing new specs or trying to fix failing ones. I encourage you to do the same, since this is not only a great chance to learn more about Ruby's internals, but also to help the Ruby community at large.</li>
<li>"MacRuby":http://www.macruby.org/trac/wiki/MacRuby: MacRuby is a port of Ruby 1.9 which sits directly on top of OS X core technologies. This means that when you e.g. create an Array, you get an NSMutableArray (see the output of Array.ancestors in macirb: [NSMutableArray, NSArray, Enumerable, NSObject, Kernel]). It also features "HotCocoa":http://www.macruby.org/trac/wiki/HotCocoa which provides mappings for common Cocoa methods thus making your MacRuby programs a lot more idiomatic. This together with the interactive way of development provided by macirb make MacRuby an interesting tool not only for Ruby developers, but also for people who want to prototype their OS X apps.</li> 
<li>"Shoes":http://shoooes.net/: Some people may be surprised to see Shoes in this list, and technically they are right. Shoes is not a distinct Ruby implementation, but it is a Ruby distribution (which will "switch to 1.9.1 in Shoes 3":http://www.mail-archive.com/shoes@code.whytheluckystiff.net/msg03168.html), which lives separated from your other Ruby interpreters, installs gems in its own location and so on. The main thing though is that Shoes provides us with an easy to learn and use, cross-platform GUI toolkit that makes developing in it fun! Granted, it may not be suitable for everything, but with a bit of creativity you can push it quite far. Have a look at the "Shoebox":http://the-shoebox.org/ to see what people are doing with it.</li>
</ul>


<p>There are of course other Ruby implementations like "Cardinal":http://cardinal2.rubyforge.org/ (a Ruby interpreter for "Parrot":http://www.parrot.org/), "IronRuby":http://www.ironruby.net/ (Ruby for the .NET environment) and "tinyrb":http://github.com/macournoyer/tinyrb/tree/master (a tiny and fast subset of Ruby), which I won't describe here in more detail, since I haven't yet had time to play around with them.</p>

<p>So why should we care? Because the various implementations create a sort of competitive spirit, therefore pushing the limits of Ruby and driving it forward, by making it faster or running on top of other VMs (JRuby, IronRuby), thus letting it leverage a plethora of established technologies and also exposing it to potential new developers. Plus we also got "RubySpec":http://rubyspec.org/, so potential Ruby implementors have a standard to follow.</p>

<p>I hope you enjoyed this post, please leave comments in case you disagree with something or want to add some information!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubinius build woes]]></title>
    <link href="http://citizen428.net/blog/2009/03/10/rubinius-build-woes/"/>
    <updated>2009-03-10T00:00:00+01:00</updated>
    <id>http://citizen428.net/blog/2009/03/10/rubinius-build-woes</id>
    <content type="html"><![CDATA[<p>A couple of days ago I decided that I want to play around with "Rubinius":http://rubini.us, so I cloned the "source":http://github.com/evanphx/rubinius/tree/master from GitHub and thought I was ready to go. As it turned out that wasn't quite the case, since my first attempt to build it ended in the second error can see here:</p>

<script src="http://gist.github.com/77119.js"></script>


<p>I hopped into #rubinius to find out if more people have this problem, but that doesn't seem to be the case. At least I learnt that most active develop is going into the 'stackfull' branch, so I did a 'git checkout origin/stackfull' and gave the build another try, which resulted in the first error message you see above.</p>

<p>Determined not to give up, I decided to try one last time with 'rake vm:clean' and 'rake build:debug' and to my surprise ended up with a working Rubinius install :-)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bin/rbx -v
</span><span class='line'>rubinius 0.11.0-dev (ruby 1.8.6) (f5260b581 12/31/2009) [i686-apple-darwin9.6.0]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That made me somewhat curious, so I tried 'rake vm:clean' and 'rake build' which now also worked (still can't build master though). I have to admit that I'm slightly confused, but at least I have a working Rubinius version to play around with for the time being.</p>
]]></content>
  </entry>
  
</feed>
