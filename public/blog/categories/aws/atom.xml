<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2012-04-25T23:30:02+02:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Move EC2 AMIs between regions]]></title>
    <link href="http://citizen428.net/blog/2010/03/03/move-ec2-amis-between-regions/"/>
    <updated>2010-03-03T00:00:00+01:00</updated>
    <id>http://citizen428.net/blog/2010/03/03/move-ec2-amis-between-regions</id>
    <content type="html"><![CDATA[<p>Today I spent some time figuring out how to move <a href="http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/index.html?creating-an-ami-ebs.html">EBS-backed AMIs</a> between different EC2 regions. To save you the effort, here&#8217;s a quick summary:</p>

<ul>
<li> create a volume from the snapshot backing the AMI</li>
<li> attach this volume to a running instance and mount it</li>
<li> create a new volume in the target region</li>
<li> attach to a running instance, format and mount</li>
<li> in the source region, connect to your instance</li>
<li> rsync (over ssh, so no messing with security groups) the mounted volume to the target volume</li>
<li> once the rsync is done, create a snapshot in the target region</li>
<li> register this snapsho as new AMI with <a href="http://docs.amazonwebservices.com/AmazonEC2/dg/2007-01-03/CLTRG-register.html">ec2-register</a></li>
</ul>


<p>Not rocket science, but definitely not as good as just being able to share your own AMIs between regions...</p>

<p><strong>Update:</strong> Robert J. Berger wrote this <a href="http://blog.ibd.com/scalable-deployment/copy-an-ebs-ami-image-to-another-amazon-ec2-region/">detailed step by step guide</a> based on my short summary, you should go check it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plot EC2 instance usage with Clojure and Incanter]]></title>
    <link href="http://citizen428.net/blog/2010/02/25/plot-ec2-instance-usage-with-clojure-and-incanter/"/>
    <updated>2010-02-25T00:00:00+01:00</updated>
    <id>http://citizen428.net/blog/2010/02/25/plot-ec2-instance-usage-with-clojure-and-incanter</id>
    <content type="html"><![CDATA[<p>Have you ever wondered which instance types you use most when dealing with Amazon's EC2? I have, so I came up with a short Clojure/<a href="http://incanter.org">Incanter</a> program to plot a nice chart like this:</p>

<br />


<p><img src="http://twitpic.com/show/thumb/15byfe.png" width="150" height="150" alt="EC2 usage plotted by #incanter (@liebke) on Twitpic" border="1"><br />
<a href="http://twitpic.com/15byfe" title="EC2 usage plotted by incanter">(full size image)</a></p>

<p>Here's the code, if you have any feedback please leave a comment, this was the first time I used Incanter.</p>

<script src="http://gist.github.com/315191.js?file=parse-ec2-report.clj"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple AWS scripting with boto]]></title>
    <link href="http://citizen428.net/blog/2009/12/28/simple-aws-scripting-with-boto/"/>
    <updated>2009-12-28T00:00:00+01:00</updated>
    <id>http://citizen428.net/blog/2009/12/28/simple-aws-scripting-with-boto</id>
    <content type="html"><![CDATA[<p><a href="http://code.google.com/p/boto/">boto</a> is a very nice Python interface to the Amazon Web Services which I can heartily recommend for your cloud scripting needs. Here's a quick example program I whipped up around 2 weeks ago (be gentle, I'm not a Python guy and this is just a throwaway quickie), which will list all your AMIs (excluding public ones), used S3 buckets plus a list of currently running instances with some information like instance type, start time etc. The nice part is that you can connect to any instance via SSH directly from this lsit which I find more convenient than copy/pasting the public DNS name from the AWS console:</p>

<script src="http://gist.github.com/264696.js?file=cloudwtf.py"></script>

]]></content>
  </entry>
  
</feed>
