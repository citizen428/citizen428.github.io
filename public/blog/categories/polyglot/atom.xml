<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: polyglot | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/polyglot/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2013-01-25T12:27:16-03:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang bit syntax and ID3]]></title>
    <link href="http://citizen428.net/blog/2010/09/04/erlang-bit-syntax-and-id3/"/>
    <updated>2010-09-04T00:00:00-03:00</updated>
    <id>http://citizen428.net/blog/2010/09/04/erlang-bit-syntax-and-id3</id>
    <content type="html"><![CDATA[<p>A couple of days ago I finally started properly looking at "Erlang":http://www.erlang.org/ for the first time. One aspect I find especially interesting is the "bit syntax":http://www.erlang.org/documentation/doc-5.6/doc/programming_examples/bit_syntax.html, so I wrote a small program for parsing "ID3v1 tags":http://www.id3.org/ID3v1 for practice. There's definitely room for improvement (I ignored ID3v1.1), but it  was a fun little exercise. Here's the code:</p>

<p>{% codeblock lang:erlang %}
-module(mp3).
-export([get_id3/1, get_tags/2]).</p>

<p>get_id3(File) -></p>

<pre><code>case file:open(File, [read, binary]) of
    {ok, MP3} -&gt;
        Result = case file:pread(MP3, {eof, -128}, 128) of
            {eof} -&gt; eof;
            {error, Reason} -&gt; Reason;
            {ok, &lt;&lt;"TAG", Tags/binary&gt;&gt;} -&gt; parse_id3(Tags);
            {ok, _} -&gt; no_id3
        end,
        file:close(MP3),
        Result;
    {error, Reason} -&gt; Reason
end.
</code></pre>

<p>get_tags(Tags, L) -></p>

<pre><code>lists:map(fun (Tag) -&gt; proplists:get_value(Tag, L) end, Tags).
</code></pre>

<p>parse_id3(&lt;&lt;T:30/binary,Ar:30/binary,Al:30/binary,Y:4/binary,C:30/binary,G:1/binary>>) -></p>

<pre><code>Clean = lists:map(fun cleanup/1, [T, Ar, Al, Y, C, G]),
{id3v1, lists:zip([title, artist, album, year, comment, genre], Clean)}.
</code></pre>

<p>cleanup(T) -></p>

<pre><code>lists:filter(fun(X) -&gt; X =/= 0 end, binary_to_list(T)).
</code></pre>

<p>{% endcodeblock %}</p>

<p>Lets see this in action in the Erlang shell (the MP3 comes from a similar exercise in "RubyLearning's core Ruby course":http://rubylearning.org/class/course/category.php?id=2):</p>

<p>{% codeblock lang:erlang %}
147> % file doesn't exist
147> mp3:get_id3("./test.txt").
enoent
148> % file is not an MP3
148> mp3:get_id3("./test.clj").
no_id3
150> % get the tags
150> {id3v1, Tags} = mp3:get_id3("song.mp3").
{id3v1,[{title,"Dancing Shoes"},</p>

<pre><code>    {artist,"Cliff Richard and The Shadows"},
    {album,"(SUMMER HOLIDAY  1963)"},
    {year,"2000"},
    {comment,"Rubylearning\r"},
    {genre,[24]}]}
</code></pre>

<p>{% endcodeblock %}</p>

<p>I'm too new to Erlang to judge if this is a proper use of a "property list":http://www.erlang.org/doc/man/proplists.html, but it allowed me to write <em>get_tags/2</em> as a wrapper for <em>proplists:get_value/2</em> which is rather nice:</p>

<p>{% codeblock lang:erlang %}
151> mp3:get_tags([artist], Tags).
["Cliff Richard and The Shadows"]
152> mp3:get_tags([artist, year], Tags).
["Cliff Richard and The Shadows","2000"]
{% endcodeblock %}</p>

<p>Some initial help came from "this related blog post":http://bigdingus.com/2007/05/27/id3v1-tags-via-erlang/, but I think our versions came out quite differently in the end.</p>

<p>All in all Erlang feels quite nice, except for minor syntactic quirks like different statement modifiers depending on context or the need to "extract" a local function with <em>fun</em> for the call in <em>lists:map/2</em>. Any feedback would be much appreciated, I'm sure there's plenty of things I could have done better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewiring my brain: APL and J]]></title>
    <link href="http://citizen428.net/blog/2010/08/16/rewiring-my-brain-apl-and-j/"/>
    <updated>2010-08-16T00:00:00-03:00</updated>
    <id>http://citizen428.net/blog/2010/08/16/rewiring-my-brain-apl-and-j</id>
    <content type="html"><![CDATA[<p>"<em>By relieving the brain of all unnecesary work, a good notation sets it free to concentrate on more advanced problems, and in effect increases the mental power of the race.</em>" - "A. N. Whitehead":http://en.wikipedia.org/wiki/Alfred_North_Whitehead</p>

<p>Yesterday "Andreas":http://antifuchs.soup.io/ posted this awesome video of a <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Game of Life</a> coding session in <a href="http://en.wikipedia.org/wiki/APL_(programming_language)">APL</a>, which really blew my mind. Watch it, it's well worth 8 minutes of your time!</p>

<div align="center"><iframe width="420" height="315" src="http://www.youtube.com/embed/a9xAKttWgP4" frameborder="0" allowfullscreen></iframe></div>


<p>Being extremely impressed by what I saw, I realized that I never wrote anything in a language from the "APL family":http://en.wikipedia.org/wiki/Category:APL_programming_language_family, so I decided to change that. I couldn't find a free version of APL running on OSX that wasn't time limited or required me to apply for an educational license, so I finally settled on "J":http://www.jsoftware.com/ (<a href="http://en.wikipedia.org/wiki/J_(programming_language)">Wikipedia article</a>), skimmed the docs and wrote solutions to 4 different "Project Euler":http://projecteuler.net/ problems. They are all extremely terse, but I lack the APL/J knowledge to further comment on their quality. If you have experience in either language, I'd really appreciate some comments!</p>

<p><em>Problem 7: Find the 10001st prime.</em></p>

<p>This ones fairly easy, since the vocabulary contains "p:":http://www.jsoftware.com/help/dictionary/dpco.htm which will return the n-th prime (0 indexed):
{% codeblock %}
p: 10000
{% endcodeblock %}</p>

<p><em>Problem 3: What is the largest prime factor of the number 600851475143?</em>
{% codeblock %}
{: q: 600851475143
{% endcodeblock %}</p>

<p>Get the tail ("{:":http://www.jsoftware.com/help/dictionary/d522.htm) of the list of prime factors ("q:":http://www.jsoftware.com/help/dictionary/dqco.htm)</p>

<p><em>Problem 5: What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</em>
{% codeblock %}
<em>./ }. i.20
{% endcodeblock %}
Behead ("}.":http://www.jsoftware.com/help/dictionary/d531.htm) the list of all non-negative integers up to 20 ("i.20":http://www.jsoftware.com/help/dictionary/didot.htm) and apply ("/":http://www.jsoftware.com/help/dictionary/d420.htm) the least common multiple ("</em>.":http://www.jsoftware.com/help/dictionary/d111.htm).</p>

<p><em>Problem 1: Find the sum of all the multiples of 3 or 5 below 1000.</em></p>

<p>This one took me a bit, so we'll do it step by step. First, apply ("/":http://www.jsoftware.com/help/dictionary/d420.htm) the residue ("|":http://www.jsoftware.com/help/dictionary/d230.htm) to the non-negative integers up to (non-inclusive) 1000 (i.1000):
{% codeblock %}</p>

<pre><code>(3 5|/i.1000)
</code></pre>

<p>0 1 2 0 1 2 0 1 2 0 1 2 ...
0 1 2 3 4 0 1 2 3 4 0 1 ...
{% endcodeblock %}
Filter out the elements with index 0 (0 ("[:":http://www.jsoftware.com/help/dictionary/d502.htm "I.":http://www.jsoftware.com/help/dictionary/dicapdot.htm "=":http://www.jsoftware.com/help/dictionary/d000.htm)):
{% codeblock %}</p>

<pre><code>0 ([: I. =) (3 5|/i.1000)
</code></pre>

<p>0 3  6  9 12 15 18 21 24 27 30 ...
0 5 10 15 20 25 30 35 40 45 50 ...
{% endcodeblock %}</p>

<p>Finally append the two lists (",":http://www.jsoftware.com/help/dictionary/d320.htm), remove duplicates ("~.":http://www.jsoftware.com/help/dictionary/d221.htm) and apply ("/":http://www.jsoftware.com/help/dictionary/d420.htm) "+":http://www.jsoftware.com/help/dictionary/d100.htm:
{% codeblock %}
+/ ~. ,0 ([: I. =) (3 5|/i.1000)
{% endcodeblock %}</p>

<p>Overall playing with my first non-<a href="http://en.wikipedia.org/wiki/Von_Neumann_programming_languages">von Neumann programming language</a> was a rather fun experience, especially after getting over the somewhat strange syntax and the fact that most "words" have monadic and dyadic versions. From my cursory glances J's documentation looks pretty solid and the language starts making sense a lot quicker than one might expect. It's definitely stimulating to play around with and I think I'll do a bit more of that over the next few weeks, especially since I haven't yet explored the "plotting":http://www.jsoftware.com/jwiki/Plot and "OpenGL":http://www.jsoftware.com/jwiki/OpenGL frameworks.</p>
]]></content>
  </entry>
  
</feed>
