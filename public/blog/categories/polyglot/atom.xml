<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: polyglot | citizen428.blog()]]></title>
  <link href="http://www.citizen428.net/blog/categories/polyglot/atom.xml" rel="self"/>
  <link href="http://www.citizen428.net/"/>
  <updated>2015-03-23T12:23:38+07:00</updated>
  <id>http://www.citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang bit syntax and ID3]]></title>
    <link href="http://www.citizen428.net/blog/2010/09/04/erlang-bit-syntax-and-id3/"/>
    <updated>2010-09-04T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2010/09/04/erlang-bit-syntax-and-id3</id>
    <content type="html"><![CDATA[<p>A couple of days ago I finally started properly looking at <a href="http://www.erlang.org/">Erlang</a> for the first time. One aspect I find especially interesting is the <a href="http://www.erlang.org/documentation/doc-5.6/doc/programming_examples/bit_syntax.html">bit syntax</a>, so I wrote a small program for parsing <a href="http://www.id3.org/ID3v1">ID3v1 tags</a> for practice. There’s definitely room for improvement (I ignored ID3v1.1), but it was a fun little exercise.
Here’s the code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">mp3</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">get_id3</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">get_tags</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_id3</span><span class="p">(</span><span class="nv">File</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nn">file</span><span class="p">:</span><span class="nf">open</span><span class="p">(</span><span class="nv">File</span><span class="p">,</span> <span class="p">[</span><span class="n">read</span><span class="p">,</span> <span class="n">binary</span><span class="p">])</span> <span class="k">of</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">MP3</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Result</span> <span class="o">=</span> <span class="k">case</span> <span class="nn">file</span><span class="p">:</span><span class="nf">pread</span><span class="p">(</span><span class="nv">MP3</span><span class="p">,</span> <span class="p">{</span><span class="n">eof</span><span class="p">,</span> <span class="o">-</span><span class="mi">128</span><span class="p">},</span> <span class="mi">128</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>            <span class="p">{</span><span class="n">eof</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">eof</span><span class="p">;</span>
</span><span class='line'>            <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Reason</span><span class="p">;</span>
</span><span class='line'>            <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;TAG&quot;</span><span class="p">,</span> <span class="nv">Tags</span><span class="o">/</span><span class="n">binary</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">parse_id3</span><span class="p">(</span><span class="nv">Tags</span><span class="p">);</span>
</span><span class='line'>            <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">_}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">no_id3</span>
</span><span class='line'>        <span class="k">end</span><span class="p">,</span>
</span><span class='line'>        <span class="nn">file</span><span class="p">:</span><span class="nf">close</span><span class="p">(</span><span class="nv">MP3</span><span class="p">),</span>
</span><span class='line'>        <span class="nv">Result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Reason</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Reason</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">get_tags</span><span class="p">(</span><span class="nv">Tags</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span> <span class="p">(</span><span class="nv">Tag</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nn">proplists</span><span class="p">:</span><span class="nf">get_value</span><span class="p">(</span><span class="nv">Tag</span><span class="p">,</span> <span class="nv">L</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="nv">Tags</span><span class="p">).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">parse_id3</span><span class="p">(</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nv">T</span><span class="p">:</span><span class="mi">30</span><span class="o">/</span><span class="n">binary</span><span class="p">,</span><span class="nv">Ar</span><span class="p">:</span><span class="mi">30</span><span class="o">/</span><span class="n">binary</span><span class="p">,</span><span class="nv">Al</span><span class="p">:</span><span class="mi">30</span><span class="o">/</span><span class="n">binary</span><span class="p">,</span><span class="nv">Y</span><span class="p">:</span><span class="mi">4</span><span class="o">/</span><span class="n">binary</span><span class="p">,</span><span class="nv">C</span><span class="p">:</span><span class="mi">30</span><span class="o">/</span><span class="n">binary</span><span class="p">,</span><span class="nv">G</span><span class="p">:</span><span class="mi">1</span><span class="o">/</span><span class="n">binary</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nv">Clean</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">map</span><span class="p">(</span><span class="k">fun</span> <span class="n">cleanup</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="nv">T</span><span class="p">,</span> <span class="nv">Ar</span><span class="p">,</span> <span class="nv">Al</span><span class="p">,</span> <span class="nv">Y</span><span class="p">,</span> <span class="nv">C</span><span class="p">,</span> <span class="nv">G</span><span class="p">]),</span>
</span><span class='line'><span class="p">{</span><span class="n">id3v1</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">zip</span><span class="p">([</span><span class="n">title</span><span class="p">,</span> <span class="n">artist</span><span class="p">,</span> <span class="n">album</span><span class="p">,</span> <span class="n">year</span><span class="p">,</span> <span class="n">comment</span><span class="p">,</span> <span class="n">genre</span><span class="p">],</span> <span class="nv">Clean</span><span class="p">)}.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">cleanup</span><span class="p">(</span><span class="nv">T</span><span class="p">)</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nn">lists</span><span class="p">:</span><span class="nf">filter</span><span class="p">(</span><span class="k">fun</span><span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">X</span> <span class="o">=/=</span> <span class="mi">0</span> <span class="k">end</span><span class="p">,</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="nv">T</span><span class="p">)).</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Lets see this in action in the Erlang shell (the MP3 comes from a similar exercise in <a href="http://rubylearning.org/class/course/category.php?id=2">RubyLearning’s core Ruby course</a>):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">147</span><span class="o">&gt;</span> <span class="c">% file doesn’t exist</span>
</span><span class='line'><span class="mi">147</span><span class="o">&gt;</span> <span class="nn">mp3</span><span class="p">:</span><span class="nf">get_id3</span><span class="p">(</span><span class="err">“</span><span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">txt</span><span class="err">”</span><span class="p">).</span>
</span><span class='line'><span class="n">enoent</span>
</span><span class='line'><span class="mi">148</span><span class="o">&gt;</span> <span class="c">% file is not an MP3</span>
</span><span class='line'><span class="mi">148</span><span class="o">&gt;</span> <span class="nn">mp3</span><span class="p">:</span><span class="nf">get_id3</span><span class="p">(</span><span class="err">“</span><span class="p">.</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">clj</span><span class="err">”</span><span class="p">).</span>
</span><span class='line'><span class="n">no_id3</span>
</span><span class='line'><span class="mi">150</span><span class="o">&gt;</span> <span class="c">% get the tags</span>
</span><span class='line'><span class="mi">150</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">id3v1</span><span class="p">,</span> <span class="nv">Tags</span><span class="p">}</span> <span class="o">=</span> <span class="nn">mp3</span><span class="p">:</span><span class="nf">get_id3</span><span class="p">(</span><span class="err">“</span><span class="n">song</span><span class="p">.</span><span class="n">mp3</span><span class="err">”</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">id3v1</span><span class="p">,[{</span><span class="n">title</span><span class="p">,</span><span class="err">“</span><span class="nv">Dancing</span> <span class="nv">Shoes</span><span class="err">”</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">artist</span><span class="p">,</span><span class="err">“</span><span class="nv">Cliff</span> <span class="nv">Richard</span> <span class="ow">and</span> <span class="nv">The</span> <span class="nv">Shadows</span><span class="err">”</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">album</span><span class="p">,</span><span class="err">“</span><span class="p">(</span><span class="nv">SUMMER</span> <span class="nv">HOLIDAY</span> <span class="mi">1963</span><span class="p">)</span><span class="err">”</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">year</span><span class="p">,</span><span class="err">“</span><span class="mi">2000</span><span class="err">”</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">comment</span><span class="p">,</span><span class="err">“</span><span class="nv">Rubylearningr</span><span class="err">”</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">genre</span><span class="p">,[</span><span class="mi">24</span><span class="p">]}]}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I’m too new to Erlang to judge if this is a proper use of a <a href="http://www.erlang.org/doc/man/proplists.html">property list</a>, but it allowed me to write <em>get_tags/2</em> as a wrapper for
<em>proplists:get_value/2</em> which is rather nice:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">151</span><span class="o">&gt;</span> <span class="nn">mp3</span><span class="p">:</span><span class="nf">get_tags</span><span class="p">([</span><span class="n">artist</span><span class="p">],</span> <span class="nv">Tags</span><span class="p">).</span>
</span><span class='line'><span class="p">[</span><span class="err">“</span><span class="nv">Cliff</span> <span class="nv">Richard</span> <span class="ow">and</span> <span class="nv">The</span> <span class="nv">Shadows</span><span class="err">”</span><span class="p">]</span>
</span><span class='line'><span class="mi">152</span><span class="o">&gt;</span> <span class="nn">mp3</span><span class="p">:</span><span class="nf">get_tags</span><span class="p">([</span><span class="n">artist</span><span class="p">,</span> <span class="n">year</span><span class="p">],</span> <span class="nv">Tags</span><span class="p">).</span>
</span><span class='line'><span class="p">[</span><span class="err">“</span><span class="nv">Cliff</span> <span class="nv">Richard</span> <span class="ow">and</span> <span class="nv">The</span> <span class="nv">Shadows</span><span class="err">”</span><span class="p">,</span><span class="err">“</span><span class="mi">2000</span><span class="err">”</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Some initial help came from <a href="http://bigdingus.com/2007/05/27/id3v1-tags-via-erlang/">this related blog post</a>, but I think our versions came out quite differently in the end.</p>

<p>All in all Erlang feels quite nice, except for minor syntactic quirks like different statement modifiers depending on context or the need to “extract” a local function with <em>fun</em> for the call in <em>lists:map/2</em>. Any feedback would be much appreciated, I’m sure there’s plenty of things I could have done better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewiring my brain: APL and J]]></title>
    <link href="http://www.citizen428.net/blog/2010/08/16/rewiring-my-brain-apl-and-j/"/>
    <updated>2010-08-16T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2010/08/16/rewiring-my-brain-apl-and-j</id>
    <content type="html"><![CDATA[<p>&ldquo;<em>By relieving the brain of all unnecesary work, a good notation sets it free to concentrate on more advanced problems, and in effect increases the mental power of the race.</em>&rdquo; &ndash; &ldquo;A. N. Whitehead&rdquo;:<a href="http://en.wikipedia.org/wiki/Alfred_North_Whitehead">http://en.wikipedia.org/wiki/Alfred_North_Whitehead</a></p>

<p>Yesterday &ldquo;Andreas&rdquo;:<a href="http://antifuchs.soup.io/">http://antifuchs.soup.io/</a> posted this awesome video of a <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Game of Life</a> coding session in <a href="http://en.wikipedia.org/wiki/APL_(programming_language)">APL</a>, which really blew my mind. Watch it, it&rsquo;s well worth 8 minutes of your time!</p>

<div align="center"><iframe width="420" height="315" src="http://www.youtube.com/embed/a9xAKttWgP4" frameborder="0" allowfullscreen></iframe></div>


<p>Being extremely impressed by what I saw, I realized that I never wrote anything in a language from the &ldquo;APL family&rdquo;:<a href="http://en.wikipedia.org/wiki/Category:APL_programming_language_family,">http://en.wikipedia.org/wiki/Category:APL_programming_language_family,</a> so I decided to change that. I couldn&rsquo;t find a free version of APL running on OSX that wasn&rsquo;t time limited or required me to apply for an educational license, so I finally settled on &ldquo;J&rdquo;:<a href="http://www.jsoftware.com/">http://www.jsoftware.com/</a> (<a href="http://en.wikipedia.org/wiki/J_(programming_language)">Wikipedia article</a>), skimmed the docs and wrote solutions to 4 different &ldquo;Project Euler&rdquo;:<a href="http://projecteuler.net/">http://projecteuler.net/</a> problems. They are all extremely terse, but I lack the APL/J knowledge to further comment on their quality. If you have experience in either language, I&rsquo;d really appreciate some comments!</p>

<p><em>Problem 7: Find the 10001st prime.</em></p>

<p>This ones fairly easy, since the vocabulary contains &ldquo;p:&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/dpco.htm">http://www.jsoftware.com/help/dictionary/dpco.htm</a> which will return the n-th prime (0 indexed):
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p: 10000</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Problem 3: What is the largest prime factor of the number 600851475143?</em>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{: q: 600851475143</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Get the tail (&ldquo;{:&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d522.htm">http://www.jsoftware.com/help/dictionary/d522.htm</a>) of the list of prime factors (&ldquo;q:&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/dqco.htm">http://www.jsoftware.com/help/dictionary/dqco.htm</a>)</p>

<p><em>Problem 5: What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</em>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;em>./ }. i.20</span></code></pre></td></tr></table></div></figure></notextile></div>
Behead (&ldquo;}.&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d531.htm">http://www.jsoftware.com/help/dictionary/d531.htm</a>) the list of all non-negative integers up to 20 (&ldquo;i.20&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/didot.htm">http://www.jsoftware.com/help/dictionary/didot.htm</a>) and apply (&ldquo;/&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d420.htm">http://www.jsoftware.com/help/dictionary/d420.htm</a>) the least common multiple (&ldquo;</em>.&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d111.htm">http://www.jsoftware.com/help/dictionary/d111.htm</a>).</p>

<p><em>Problem 1: Find the sum of all the multiples of 3 or 5 below 1000.</em></p>

<p>This one took me a bit, so we&rsquo;ll do it step by step. First, apply (&ldquo;/&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d420.htm">http://www.jsoftware.com/help/dictionary/d420.htm</a>) the residue (&ldquo;|&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d230.htm">http://www.jsoftware.com/help/dictionary/d230.htm</a>) to the non-negative integers up to (non-inclusive) 1000 (i.1000):
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>(3 5|/i.1000)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>0 1 2 0 1 2 0 1 2 0 1 2 &hellip;
</span><span class='line'>0 1 2 3 4 0 1 2 3 4 0 1 &hellip;</span></code></pre></td></tr></table></div></figure></notextile></div>
Filter out the elements with index 0 (0 (&ldquo;[:&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d502.htm">http://www.jsoftware.com/help/dictionary/d502.htm</a> &ldquo;I.&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/dicapdot.htm">http://www.jsoftware.com/help/dictionary/dicapdot.htm</a> &ldquo;=&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d000.htm">http://www.jsoftware.com/help/dictionary/d000.htm</a>)):
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>0 ([: I. =) (3 5|/i.1000)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>0 3  6  9 12 15 18 21 24 27 30 &hellip;
</span><span class='line'>0 5 10 15 20 25 30 35 40 45 50 &hellip;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally append the two lists (&ldquo;,&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d320.htm">http://www.jsoftware.com/help/dictionary/d320.htm</a>), remove duplicates (&ldquo;~.&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d221.htm">http://www.jsoftware.com/help/dictionary/d221.htm</a>) and apply (&ldquo;/&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d420.htm">http://www.jsoftware.com/help/dictionary/d420.htm</a>) &ldquo;+&rdquo;:<a href="http://www.jsoftware.com/help/dictionary/d100.htm:">http://www.jsoftware.com/help/dictionary/d100.htm:</a>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+/ ~. ,0 ([: I. =) (3 5|/i.1000)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Overall playing with my first non-<a href="http://en.wikipedia.org/wiki/Von_Neumann_programming_languages">von Neumann programming language</a> was a rather fun experience, especially after getting over the somewhat strange syntax and the fact that most &ldquo;words&rdquo; have monadic and dyadic versions. From my cursory glances J&rsquo;s documentation looks pretty solid and the language starts making sense a lot quicker than one might expect. It&rsquo;s definitely stimulating to play around with and I think I&rsquo;ll do a bit more of that over the next few weeks, especially since I haven&rsquo;t yet explored the &ldquo;plotting&rdquo;:<a href="http://www.jsoftware.com/jwiki/Plot">http://www.jsoftware.com/jwiki/Plot</a> and &ldquo;OpenGL&rdquo;:<a href="http://www.jsoftware.com/jwiki/OpenGL">http://www.jsoftware.com/jwiki/OpenGL</a> frameworks.</p>
]]></content>
  </entry>
  
</feed>
