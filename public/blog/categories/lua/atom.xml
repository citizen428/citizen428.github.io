<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lua | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/lua/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2013-01-25T12:27:16-03:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing nmap scripts with Lua]]></title>
    <link href="http://citizen428.net/blog/2011/12/23/writing-nmap-scripts-with-lua/"/>
    <updated>2011-12-23T13:54:00-03:00</updated>
    <id>http://citizen428.net/blog/2011/12/23/writing-nmap-scripts-with-lua</id>
    <content type="html"><![CDATA[<p>About 2 weeks ago I finally started looking into <a href="http://www.lua.org/">Lua</a>, a language that's been on my radar for a while but that I never really got around to play with so far. Then I realized that the <a href="http://nmap.org/book/nse.html">Nmap Scripting Engine</a> uses Lua scripts, so I had an excuse to hack on this stuff for work. Here's my first small <code>nmap</code> script, which will extract the contents of the generator meta tag if there is one. It's nothing funky, but it shows how easy it is to write custom scripts for <code>nmap</code> thanks to the provided libraries like <code>http</code> and <code>shortport</code>.</p>

<p>{% codeblock lang:lua %}
description = [[
Displays the contents of the "generator" meta tag if there is one.
]]</p>

<p>author = "Michael Kohl"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"discovery", "safe"}</p>

<p>-- documentation skipped</p>

<p>require('http')
require('shortport')</p>

<p>portrule = shortport.http</p>

<p>action = function(host, port)
   local response, loc, generator</p>

<p>   response = http.get(host, port, '/')</p>

<p>   -- deal with redirects
   while response['status-line']:lower():match("<sup>http/1.1</sup> 30[12]") do</p>

<pre><code>  loc = response.header['location']
  response = http.get_url(loc)
</code></pre>

<p>   end</p>

<p>   for line in response.body:gmatch("[<sup>\r\n]+")</sup> do</p>

<pre><code>  generator = line:match('&lt;meta name="generator" content="(.*)" /&gt;')
  if generator then
     return generator
  end
</code></pre>

<p>   end
end
{% endcodeblock %}</p>

<p><strong>Update:</strong> Here's the version that's now part of <code>nmap</code>, it even made it to the default category.</p>

<p>{% codeblock lang:lua %}
description = [[
Displays the contents of the "generator" meta tag if there is one.
]]</p>

<p>author = "Michael Kohl"
license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
categories = {"default", "discovery", "safe"}</p>

<p>-- documentation skipped</p>

<p>require('http')
require('shortport')
require('stdnse')</p>

<p>-- helper function
local follow_redirects = function(host, port, path, n)
   local pattern = "<sup>[hH][tT][tT][pP]/1.[01]</sup> 30[12]"
   local response = http.get(host, port, path)</p>

<p>   while response['status-line']:match(pattern) and n > 0 do</p>

<pre><code>  n = n - 1
  loc = response.header['location']
  response = http.get_url(loc)
</code></pre>

<p>   end</p>

<p>   return response
end</p>

<p>portrule = shortport.http</p>

<p>action = function(host, port)
   local response, loc, generator
   local path = stdnse.get_script_args('http-generator.path') or '/'
   local redirects = tonumber(stdnse.get_script_args('http-generator.redirects')) or 3</p>

<p>   -- Worst case: <meta name=Generator content="Microsoft Word 11">
   local pattern = '<meta name="?generator"? content="([^\"]*)" ?/?>'</p>

<p>   -- make pattern case-insensitive
   pattern = pattern:gsub("%a", function (c)</p>

<pre><code>           return string.format("[%s%s]", string.lower(c),
                                          string.upper(c))
         end)
</code></pre>

<p>   response = follow_redirects(host, port, path, redirects)
   return response.body:match(pattern)</p>

<p>end
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
