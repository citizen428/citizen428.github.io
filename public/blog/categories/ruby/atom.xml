<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2012-04-29T22:35:06+02:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby GitHub projects Atom feed]]></title>
    <link href="http://citizen428.net/blog/2011/11/23/ruby-github-projects-atom-feed/"/>
    <updated>2011-11-23T20:43:00+01:00</updated>
    <id>http://citizen428.net/blog/2011/11/23/ruby-github-projects-atom-feed</id>
    <content type="html"><![CDATA[<p>The other day I found an <a href="http://xach.livejournal.com/298220.html">interesting post</a> by Lisper extraordinaire <a href="http://xach.livejournal.com/">Zach Beane</a> on <a href="http://planet.lisp.org/">Planet Lisp</a>, where he describes his program to generate a feed for the <a href="https://github.com/languages/Common%20Lisp/created">GitHub page about recently created Common Lisp repos</a>.</p>

<p>Since good artists borrow and great artists steal, I decided to do the latter with his idea and implemented something similar for the <a href="https://github.com/languages/Ruby/created">new Ruby repos</a>. It uses <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/open-uri/rdoc/">open-uri</a> for fetching the page, <a href="http://nokogiri.org/">Nokogiri</a> for parsing it and <a href="http://builder.rubyforge.org/">Builder</a> for generating the Atom feed.</p>

<p>``` ruby
require 'open-uri'
require 'nokogiri'
require 'builder'</p>

<p>html = open("https://github.com/languages/Ruby/created")
doc = Nokogiri::HTML.parse(html)</p>

<p>atom = Builder::XmlMarkup.new(:target => STDOUT, :indent => 2)
atom.instruct!
atom.feed "xmlns" => "http://www.w3.org/2005/Atom" do
  atom.id "urn:citizen428:github:newrepos"
  atom.updated Time.now.utc.iso8601(0)
  atom.title "New GitHub Ruby Repos", :type => "text"
  atom.link :rel => "self", :href => "/ruby_github.atom"
  doc.xpath("//table[@class='repo']/tr/td[@class='title']/a").each do |title|</p>

<pre><code>name = title.content
owner = title.at_xpath("../../td[@class='owner']/a").content
desc = title.at_xpath("../../following-sibling::tr/td[@class='desc']").content
date = Time.parse(title.at_xpath("../../td[@class='date']").content)
atom.entry do
  atom.title "#{owner}: #{name}"
  atom.author { atom.name owner }
  atom.link "href" =&gt; "https://github.com#{title.attributes["href"].value}"
  atom.id "urn:citizen428:github:#{owner}:#{name}"
  atom.published date.utc.iso8601(0)
  atom.updated date.utc.iso8601(0)
  atom.content desc, :type =&gt; "html"
end
</code></pre>

<p>  end
end
```</p>

<p>I'm hosting <a href="http://citizen428.net/ruby_github.atom">the feed</a> on this blog (updated regularly via cron), add it to your feed reader to discover potentially interesting new Ruby projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A little Pow helper]]></title>
    <link href="http://citizen428.net/blog/2011/11/22/a-little-pow-helper/"/>
    <updated>2011-11-22T21:08:00+01:00</updated>
    <id>http://citizen428.net/blog/2011/11/22/a-little-pow-helper</id>
    <content type="html"><![CDATA[<p>If you are a Ruby developer on MacOS X, you probably love <a href="http://pow.cx">Pow</a> as much as I do. While skimming the <a href="http://pow.cx/manual.html">fine manual</a> today, I noticed <a href="http://pow.cx/manual.html#section_3.2">section 3.2</a>, "Reading the Current Configuration", which explains that you can query Pow's config and status via simple HTTP requests:</p>

<p><code>bash Query Pow's status http://pow.cx/manual.html#section_3.2 Pow manual
curl -H host:pow localhost/status.json
</code></p>

<p>Since I know I'd probably forget that sooner than later, I immediately wrapped it up in a small script, which I called <code>pow-show</code> and put in <code>~/bin</code>:</p>

<p>``` ruby ~/bin/pow-show</p>

<h1>!/usr/bin/env ruby</h1>

<p>require 'json'</p>

<p>unless %w(status config).include?(ARGV[0])
  puts "Usage: #{File.basename($0)} status|config"
  exit 1
end</p>

<p>jj JSON.parse(<code>curl -s -H host:pow localhost/#{ARGV[0]}.json</code>)
```</p>

<p>Here's some example output:</p>

<p><code>javascript pow-show status
{
  "pid": 802,
  "version": "0.3.2",
  "requestCount": 134
}
</code></p>

<p>``` javascript pow-show config
{
  "bin": "/Users/name/Library/Application Support/Pow/Versions/0.3.2/bin/pow",
  "dstPort": 80,
  "httpPort": 20559,
  "dnsPort": 20560,
  "timeout": 900,
  "workers": 2,
  "domains": [</p>

<pre><code>"dev"
</code></pre>

<p>  ],
  "extDomains": [</p>

<p>  ],
  "hostRoot": "/Users/name/Library/Application Support/Pow/Hosts",
  "logRoot": "/Users/name/Library/Logs/Pow",
  "rvmPath": "/Users/name/.rvm/scripts/rvm"
}
```</p>

<p>Maybe that's useful for someone else too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frozen Rails recap]]></title>
    <link href="http://citizen428.net/blog/2011/09/24/frozen-rails-recap/"/>
    <updated>2011-09-24T00:00:00+02:00</updated>
    <id>http://citizen428.net/blog/2011/09/24/frozen-rails-recap</id>
    <content type="html"><![CDATA[<p>I spent the first half of this week in Helsinki at the excellent "Frozen Rails":https://frozenrails.eu/ conference and thought I'd share some impressions with you:</p>

<p><em>Monday:</em> when we (team "Tupalo":http://tupalo.com that is) finally got to the pre-opening event it was rather empty already, but we managed to collect the leftovers and get a party going that was very fun and helped in getting to know many people quickly. Later that night we picked up a jet lagged Ryan Smith ("Heroku":http://heroku.com) from his hotel and stayed out much longer than we should have... ;-)</p>

<p><em>Tuesday:</em> Arriving at Finlandia hall still a bit hungover, I soon got very excited by what I saw around me. The conference is rather small, which in my opinion is one of its strongest points, since it's very easy to actually get to talk to a lot of the attendees. The overall atmosphere is very amicable, so you barely ever feel like you are intruding on someone when you strike up a random conversation. Talk-wise it started with Geoffrey Grosenbach's ("PeepCode":http://peepcode.com/) "keynote":https://frozenrails.eu/sessions#geoffrey, which was nice but not overly exciting. This was followed by a spontaneous talk by Jeff Kasimir ("Jumpstart Lab":http://jumpstartlab.com/) titled "The Problem Is In Your Ruby", which was absolutely fantastic. I also got a chance to talk to Jeff about potential cooperations with "RubyLearning":http://rubylearning.org later, let's see if that gets anywhere. I then took a couple of hours off for some socializing, before watching Jeff's second talk "Blow Up Your Views":https://frozenrails.eu/sessions#jeff. The last talk I saw that day was by the "Travis CI":http://travis-ci.org/ team and I enjoyed it so much that I immediately switched one of my own projects to Travis. After the conference we had dinner in the excellent "Soul Kitchen":http://www.soulkitchen.fi/, followed by some drinks at "A21":http://www.a21.fi/ and "Bar Loose":http://www.barloose.com/.</p>

<p><em>Wednesday:</em> Despite a lack of sleep I dragged myself to Richard White's ("UserVoice":http://uservoice.com/) "keynote":https://frozenrails.eu/sessions#richard, who talked about startups and entrepreneurship. That was followed by the very interesting "How GitHub Uses GitHub to Build GitHub":https://frozenrails.eu/sessions#zach by Zach Holman ("GitHub":http://github.com, surprise). I then spent some time hacking a little on a bit of Ruby code for my lightning talk, but went to see Ryan Smith's talk on how stuff works at Heroku. After the coffee break I sat in "Joseph Ruscio's" ("Librato":https://silverline.librato.com/) talk "Implementing a RESTful API with Ruby the Right Way":https://frozenrails.eu/sessions#joseph_ruscio, but I must admit that I was a bit tired and didn't pay as much attention as the talk deserved. The last talk was my personal favorite, "Debugging Ruby Performance":https://frozenrails.eu/sessions#aman by GitHub's Aman Gupta (I have some notes as an Emacs org-file "on GitHub":https://github.com/citizen428/study-notes/blob/master/ruby-perfomance/ruby-perfomance.org). The conference ended with some lightning talks, including our own on hack weeks at Tupalo. For dinner Heroku invited some 25 or so people to the expensive "Hotel K&auml;mp":http://www.hotelkamp.fi/, where I spent most of the time talking to Topfunky and his friends. We then went over to "Le Bonk":http://www.lebonk.fi/ to join the GitHub drink up, but due to a non-disclosure agreement with myself no details about this evening will be made public ;-)</p>

<p>All in all a very nice and well organized conference, that for me has the perfect size. Congrats and thanks to the team for organizing such an awesome event! BTW: someone set up a "GitHub repository":https://github.com/i0rek/frozenrails-notes with Frozen Rails slides, photos and notes, check it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The updated Ruby reading list]]></title>
    <link href="http://citizen428.net/blog/2011/08/27/the-updated-ruby-reading-list/"/>
    <updated>2011-08-27T00:00:00+02:00</updated>
    <id>http://citizen428.net/blog/2011/08/27/the-updated-ruby-reading-list</id>
    <content type="html"><![CDATA[<p>A little more than a year ago, I posted a "Ruby reading list":http://citizen428.net/archives/430 consisting of blog posts I often recommend to our students at RubyLearning as well as some interesting articles. It's time for the updated version (some links are the same as last time, some are new, some are gone):</p>

<ul>
<li><a href="http://www.caliban.org/ruby/rubyguide.shtml">The Unofficial Ruby Usage Guide</a> (tips, tricks and style guidelines)</li><br />
<li><a href="http://www.hokstad.com/ruby-object-model.html">The Ruby Object Model &#8211; Structure and Semantics</a></li><br />
<li><a href="http://viewsourcecode.org/why/hacking/seeingMetaclassesClearly.html">Seeing Metaclasses Clearly</a> </li><br />
<li><a href="http://ola-bini.blogspot.com/2006/09/ruby-singleton-class.html">The Ruby Singleton Class</a> </li><br />
<li><a href="http://practicalruby.blogspot.com/2007/02/ruby-metaprogramming-introduction.html">A Ruby Metaprogramming Introduction</a> </li><br />
<li><a href="http://viewsourcecode.org/why/hacking/theFullyUpturnedBin.html">The Fully Upturned Bin</a> (memory management and garbage collection)</li><br />
<li><a href="http://coaxialhost.com/tutorials/writing_ruby_extensions.html">Writing Ruby extensions</a> </li><br />
<li><a href="http://devver.wordpress.com/2009/06/30/a-dozen-or-so-ways-to-start-sub-processes-in-ruby-part-1/">A dozen (or so) ways to start sub-processes in Ruby: Part 1</a> ("Part 2":http://devver.wordpress.com/2009/07/13/a-dozen-or-so-ways-to-start-sub-processes-in-ruby-part-2/, "Part 3":http://devver.wordpress.com/2009/10/12/ruby-subprocesses-part_3/)</li><br />
<li><a href="http://www.robertsosinski.com/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/">Understanding Ruby Blocks, Procs and Lambdas</a></li><br />
<li><a href="http://railstips.org/blog/archives/2006/11/18/class-and-instance-variables-in-ruby/">Class and Instance Variables In Ruby</a> (also class instance variables)</li><br />
<li><a href="http://www.igvita.com/2010/03/22/untangling-evented-code-with-ruby-fibers/">Untangling Evented Code with Ruby Fibers</a> </li><br />
<li><a href="http://judofyr.net/posts/tailin-ruby.html" title="faking tail call optimization in Ruby">Tailin&#8217; Ruby</a> </li><br />
<li><a href="http://tagaholic.me/2009/05/11/demystifying-irb-commands.html">Demistifying IRB&#8217;s Commands</a> </li><br />
<li><a href="http://kconrails.com/2010/11/30/ruby-enumerable-primer-part-1-the-basics/">Ruby Enumerable Magic: The Basics</a></li><br />
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Going to the C side]]></title>
    <link href="http://citizen428.net/blog/2011/06/24/ruby-going-to-c-side/"/>
    <updated>2011-06-24T00:00:00+02:00</updated>
    <id>http://citizen428.net/blog/2011/06/24/ruby-going-to-c-side</id>
    <content type="html"><![CDATA[<p>Yesterday afternoon I decided it's about time I finally learn how to write Ruby C extensions, so I went ahead and rewrote one of our <a href="http://www.rubylearning.org/class/">RubyLearning.org</a> exercises in C. Here's the exercise description:</p>

<p><blockquote><p>Write a class called Person, that has balance as an instance variable and<br/>the following public method: show_balance.</p></p><p><p>I shall create the Person object as follows:</p></p><p><p>p = Person.new(40000)<br/>puts p.show_balance # calling the method</p></blockquote></p>

<p>Here's the program in C, with relevant function signatures included as comments:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ruby</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">VALUE</span> <span class="n">initialize</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// VALUE rb_iv_set(VALUE obj, char *name, VALUE value)</span>
</span><span class='line'>  <span class="n">rb_iv_set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="s">&quot;@balance&quot;</span><span class="p">,</span> <span class="n">amount</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">static</span> <span class="n">VALUE</span> <span class="n">show_balance</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// VALUE rb_iv_get(VALUE obj, char *name)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rb_iv_get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="s">&quot;@balance&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">Init_person</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// VALUE rb_define_class(char *name, VALUE superclass)</span>
</span><span class='line'>  <span class="n">VALUE</span> <span class="n">cPerson</span> <span class="o">=</span> <span class="n">rb_define_class</span><span class="p">(</span><span class="s">&quot;Person&quot;</span><span class="p">,</span> <span class="n">rb_cObject</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// void rb_define_method(VALUE classmod, char &lt;em&gt;name, VALUE(&lt;/em&gt;func)(), int argc)</span>
</span><span class='line'>  <span class="n">rb_define_method</span><span class="p">(</span><span class="n">cPerson</span><span class="p">,</span> <span class="s">&quot;initialize&quot;</span><span class="p">,</span> <span class="n">initialize</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rb_define_method</span><span class="p">(</span><span class="n">cPerson</span><span class="p">,</span> <span class="s">&quot;show_balance&quot;</span><span class="p">,</span> <span class="n">show_balance</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I think the code is very self-explanatory, almost like writing Ruby in C. As you can see we define a class called "Person" in the "Init_person" function (which is called by Ruby when it loads our module), where we add the functions as instance methods with "rb_define_method". To compile this, we need an extconf.rb, which contains the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">require</span> <span class="err">&#39;</span><span class="n">mkmf</span><span class="err">&#39;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">extension_name</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">person</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">create_makefile</span><span class="p">(</span><span class="n">extension_name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can build and run it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>→ ruby extconf.rb
</span><span class='line'>creating Makefile
</span><span class='line'>→ make
</span><span class='line'>gcc -I. <span class="o">[</span>output snipped<span class="o">]</span>
</span><span class='line'>→ irb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;<span class="nv">$:</span>&amp;lt;&amp;lt;<span class="s1">&#39;.&#39;</span> <span class="c">#=&gt; [..., &#39;.&#39;]</span>
</span><span class='line'>require <span class="s1">&#39;person&#39;</span> <span class="c">#=&gt; true</span>
</span><span class='line'><span class="nv">p</span> <span class="o">=</span> Person.new<span class="o">(</span>3000<span class="o">)</span> <span class="c">#=&gt; #&amp;lt;Person:0x00000100a01940 @balance=3000&gt;</span>
</span><span class='line'>p.show_balance <span class="c">#=&gt; 3000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote>

<p>As you can see everything works as if we had defined the class in Ruby. Let's add another method to deposit some money, which gives us a chance to demonstrate "rb_funcall":</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="n">VALUE</span> <span class="nf">deposit</span><span class="p">(</span><span class="n">VALUE</span> <span class="n">self</span><span class="p">,</span> <span class="n">VALUE</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// VALUE rb_funcall(VALUE recv, ID id, int argc, ... )</span>
</span><span class='line'>  <span class="n">VALUE</span> <span class="n">result</span> <span class="o">=</span> <span class="n">rb_funcall</span><span class="p">(</span><span class="n">rb_iv_get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="s">&quot;@balance&quot;</span><span class="p">),</span> <span class="n">rb_intern</span><span class="p">(</span><span class="s">&quot;+&quot;</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">amount</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rb_iv_set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="s">&quot;@balance&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We also need to add this function as a method in "Init_person":</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">rb_define_method</span><span class="p">(</span><span class="n">cPerson</span><span class="p">,</span> <span class="s">&quot;deposit&quot;</span><span class="p">,</span> <span class="n">deposit</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Does it work?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;p.deposit(400) #=&gt; 3400</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote>

<p>It does and we've successfully created a Ruby class from C. Probably not the type of class you'd really implement this way, but good enough as an example.</p>

<p>Recommended reading:</p>

<ul>
<li>"Extending Ruby":http://www.ruby-doc.org/docs/ProgrammingRuby/html/ext_ruby.html from the PickAxe</li>
<li>Mark Volkmann's presentation "Ruby C Extensions":http://java.ociweb.com/mark/NFJS/RubyCExtensions.pdf</li>
</ul>

]]></content>
  </entry>
  
</feed>
