<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: regex | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/regex/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2013-09-01T01:28:13+08:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RegEx madness]]></title>
    <link href="http://citizen428.net/blog/2007/04/05/regex-madness/"/>
    <updated>2007-04-05T00:00:00+08:00</updated>
    <id>http://citizen428.net/blog/2007/04/05/regex-madness</id>
    <content type="html"><![CDATA[<p>Today at work we needed to find a regular expression to extract the name of a backup job from an SNMP trap. The trap looks as follows:</p>

<p>&ldquo;[beginning garbage]job name[more garbage]&rdquo;</p>

<p>The job name can consist of several words containing alphanumeric characters, separated by either a space, an underscore or a dash. Here&rsquo;s the crucial part of the final solution I came up with:</p>

<p><b>((?:\w+[&ndash; ]?)<em>\w</em>)</b></p>

<p>When you use this in a longer regex that also filters out the beginning garbage, this works like a charm even for strange job names as &ldquo;foo-bar_baz qux_ madness&rdquo;.</p>

<p>Setting Orange, Discord 22, 3173 YOLD</p>
]]></content>
  </entry>
  
</feed>
