<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | citizen428.blog()]]></title>
  <link href="http://www.citizen428.net/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.citizen428.net/"/>
  <updated>2015-03-02T10:27:50+07:00</updated>
  <id>http://www.citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RoR: 'call': Cannot yield from a Proc type filter.]]></title>
    <link href="http://www.citizen428.net/blog/2010/08/20/ror-call-cannot-yield-from-a-proc-type-filter/"/>
    <updated>2010-08-20T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2010/08/20/ror-call-cannot-yield-from-a-proc-type-filter</id>
    <content type="html"><![CDATA[<p>As we all know, there are 2 main differences between procs and lambdas in Ruby.</p>

<ol>
<li>Argument checking:</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;p = Proc.new { |name| &amp;ldquo;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sr">&amp;rdquo; }</span>
</span><span class='line'><span class="sr">=&gt; #&amp;lt;Proc:0x000001008dc600@(irb):3&gt;</span>
</span><span class='line'><span class="sr">l = lambda { |name| &amp;ldquo;Hello </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sr">&amp;rdquo; }</span>
</span><span class='line'><span class="sr">=&gt; #&amp;lt;Proc:0x000001008d3c08@(irb):4 (lambda)&gt;</span>
</span><span class='line'><span class="sr">p.call</span>
</span><span class='line'><span class="sr">=&gt; &amp;ldquo;Hello &amp;rdquo;</span>
</span><span class='line'><span class="sr">l.call</span>
</span><span class='line'><span class="sr">ArgumentError: wrong number of arguments (0 for 1)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">4</span><span class="ss">:in</span> <span class="sb">`block in irb_binding&#39;</span>
</span><span class='line'><span class="sb">from (irb):6:in `</span><span class="n">call</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">from (irb):6</span>
</span><span class='line'><span class="s1">from /Users/michi/.rvm/rubies/ruby-1.9.2-p0/bin/irb:17:in `&amp;lt;main&amp;gt;&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote>

<ol>
<li>The possibility to return from within the closure:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="n">blockquote</span><span class="o">&gt;&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&amp;lt;Proc:0x000001008c83a8@(irb):7&gt;</span>
</span><span class='line'><span class="n">l</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&amp;lt;Proc:0x000001008c4050@(irb):8 (lambda)&gt;</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="ss">LocalJumpError</span><span class="p">:</span> <span class="n">unexpected</span> <span class="k">return</span>
</span><span class='line'> <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">7</span><span class="ss">:in</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">block</span> <span class="k">in</span> <span class="n">irb_binding</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"> from (irb):9:in&lt;/code&gt;call&#39;</span>
</span><span class='line'> <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">9</span>
</span><span class='line'> <span class="n">from</span> <span class="sr">/Users/mi</span><span class="n">chi</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="o">-</span><span class="n">p0</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="ss">irb</span><span class="p">:</span><span class="mi">17</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;&amp;lsquo;</span>
</span><span class='line'><span class="sb">l.call</span>
</span><span class='line'><span class="sb">=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote></li>
</ol>


<p>I&rsquo;ve known about this for a while, but as a Rubyists who until quite recently happily ignored Rails, I didn&rsquo;t know that ActiveSupport changes the &ldquo;LocalJumpError&rdquo; from the second example into</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sb">`call&#39;: Cannot yield from a Proc type filter.</span>
</span><span class='line'><span class="sb">   The Proc must take two arguments and execute</span>
</span><span class='line'><span class="sb">   #call on the second argument. (ArgumentError)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>when you try to return from callbacks like &ldquo;before_save&rdquo;. I spent quite some time debugging this before I finally found the solution in this &ldquo;blog post&rdquo;:<a href="http://obosan.blogspot.com/2008/11/blocksclosures-and-return.html.">http://obosan.blogspot.com/2008/11/blocksclosures-and-return.html.</a> Instead of</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after_save</span> <span class="k">do</span> <span class="o">|</span><span class="n">foo</span><span class="o">|</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>you have to do</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">after_save</span><span class="p">(</span><span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">foo</span><span class="o">|</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Probably obvious to more experienced Rails developers, but I really got thrown off by the &ldquo;ArgumentError&rdquo; that replaced the &ldquo;LocalJumpError&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinatra course at RubyLearning announced!]]></title>
    <link href="http://www.citizen428.net/blog/2009/02/25/sinatra-course-at-rubylearning-announced/"/>
    <updated>2009-02-25T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2009/02/25/sinatra-course-at-rubylearning-announced</id>
    <content type="html"><![CDATA[<p>For a lot of people, Ruby became almost equivalent to &ldquo;Rails&rdquo;:<a href="http://rubyonrails.org/,">http://rubyonrails.org/,</a> but this doesn&rsquo;t mean that Rubyists can&rsquo;t choose from a wider selection of web frameworks. One of them is the microframework &ldquo;Sinatra&rdquo;:<a href="http://www.sinatrarb.com/,">http://www.sinatrarb.com/,</a> for which &ldquo;RubyLearning&rdquo;:<a href="http://rubylearning.org">http://rubylearning.org</a> will start a &ldquo;course&rdquo;:<a href="http://rubylearning.com/blog/2009/02/25/introduction-to-sinatra-a-new-course/">http://rubylearning.com/blog/2009/02/25/introduction-to-sinatra-a-new-course/</a> on March 21st. Registration is open now, the price is a reasonable US$3 for the first 15 people to sign up, US$4 for the next 25 and finally US$5 for everyone after that. Yours truly will also be a mentor for this course and would be happy to see some of you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some quick Ruby tips]]></title>
    <link href="http://www.citizen428.net/blog/2009/02/09/some-quick-ruby-tips/"/>
    <updated>2009-02-09T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2009/02/09/some-quick-ruby-tips</id>
    <content type="html"><![CDATA[<p>Good news for OS X users: &ldquo;Priit Haamer&rdquo;:<a href="http://www.priithaamer.com/">http://www.priithaamer.com/</a> provides documentation for Ruby 1.9 and Rails as dictionaries for Dictionary.app, which makes them searchable by Spotlight (&ldquo;Ruby documentation&rdquo;:<a href="http://www.priithaamer.com/blog/ruby-dictionary-for-mac-os-x,">http://www.priithaamer.com/blog/ruby-dictionary-for-mac-os-x,</a> &ldquo;Rails documentation&rdquo;:<a href="http://www.priithaamer.com/blog/updated-ruby-on-rails-dictionary">http://www.priithaamer.com/blog/updated-ruby-on-rails-dictionary</a>)!</p>

<p>There also was a nice discussion over the last few days on &ldquo;Ruby&rsquo;s Most Underused Keyword&rdquo;:<a href="http://www.rubyrailways.com/rubys-most-underused-keyword/,">http://www.rubyrailways.com/rubys-most-underused-keyword/,</a> which is quite an interesting read (make sure you don&rsquo;t skip the comments).</p>

<p>Last but not least I want to point out &ldquo;isitruby19.com&rdquo;:<a href="http://isitruby19.com/,">http://isitruby19.com/,</a> a website that tests gems for their compatibility with the newest Ruby release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loads of links]]></title>
    <link href="http://www.citizen428.net/blog/2005/12/10/loads-of-links/"/>
    <updated>2005-12-10T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2005/12/10/loads-of-links</id>
    <content type="html"><![CDATA[<p>I haven&rsquo;t blogged for quite some time now, so I decided I could at least entertain you with one of my semi-regular link dumps until I&rsquo;m motivated enough to write a proper entry again&hellip;</p>

<p><em><em>Ruby</em></em></p>

<p>&ldquo;RadRails&rdquo;:<a href="http://www.radrails.org/:">http://www.radrails.org/:</a> From a rather recent mail on &ldquo;ruby-talk&rdquo;:<a href="http://blade.nagaokaut.ac.jp/ruby/ruby-talk/index.shtml">http://blade.nagaokaut.ac.jp/ruby/ruby-talk/index.shtml</a> I learned about RadRails, an IDE for (who would&rsquo;ve guessd) &ldquo;Ruby on Rails&rdquo;:<a href="http://www.rubyonrails.org/">http://www.rubyonrails.org/</a> which was built using the <a href="http://www.eclipse.org/rcp">Eclipse RCP</a>. Unfortunately I didn&rsquo;t have too much time to play with it yet, but so far it seems to be quite nice and if you&rsquo;re into Rails you maybe should have a look at this project.</p>

<p>&ldquo;eigenclass&rdquo;:<a href="http://eigenclass.org/:">http://eigenclass.org/:</a> Recently &ldquo;RedHanded&rdquo;:<a href="http://redhanded.hobix.com/">http://redhanded.hobix.com/</a> kept talking about Mauricio Fernandez' new blog called &ldquo;eigenclass&rdquo;, which talks about a lot of really interesting and advanced Ruby stuff. Definitely an interesting read for every serious Ruby programmer and everyone who wants to become one.</p>

<p>&ldquo;try ruby!&rdquo;:<a href="http://tryruby.hobix.com/:">http://tryruby.hobix.com/:</a> As I found out on &ldquo;poignant-stiffs&rdquo;:<a href="http://rubyforge.org/pipermail/poignant-stiffs/">http://rubyforge.org/pipermail/poignant-stiffs/</a> <a href="http://whytheluckystiff.net/">why</a> is at it again, which means there&rsquo;s something cool coming up. Despite not involving cartoon foxes or chunky bacon, &ldquo;try ruby&rdquo;:<a href="http://tryruby.hobix.com/">http://tryruby.hobix.com/</a> is still a really neat project, giving you the opportunity to interactively test Ruby from within your web browser. There&rsquo;s also a little tutorial, so this site may very well become the first stop to send Nubies to&hellip;</p>

<p><em><em>Disobey</em></em></p>

<p>&ldquo;The Hacktivist&rdquo;:<a href="http://www.thehacktivist.com/:">http://www.thehacktivist.com/:</a> Instead of summing up what the Hacktivist is all about, I&rsquo;ll just give you the self-description of the project: &ldquo;<i>The Hacktivist is dedicated to examining the theory and practice of hacktivism and electronic civil disobedience while contributing to the evolution of hacktivism by promoting constructive debate, effective direct action, and creative solutions to complex problems in order to facilitate positive change.</i>&rdquo; &ndash; Involve yourself!</p>

<p>&ldquo;The World&rsquo;s Most Populated Countries&rdquo;:<a href="http://www.odt.org/Pictures/poplcart.jpg:">http://www.odt.org/Pictures/poplcart.jpg:</a> Sometimes a new look on things helps changing your perspective in a positive way. That&rsquo;s why it&rsquo;s important to take a minute or two to think about this map of the Earth, where all the countries got resized in relation to their population.</p>

<p>&ldquo;Church of the Flying Spaghetti Monster&rdquo;:<a href="http://www.venganza.org/index.htm:">http://www.venganza.org/index.htm:</a> This comes from an open letter to the Kansas school board: &ldquo;<i> I am writing you with much concern after having read of your hearing to decide whether the alternative theory of Intelligent Design should be taught along with the theory of Evolution. [&hellip;]  Let us remember that there are multiple theories of Intelligent Design. I and many others around the world are of the strong belief that the universe was created by a Flying Spaghetti Monster. It was He who created all that we see and all that we feel. We feel strongly that the overwhelming scientific evidence pointing towards evolutionary processes is nothing but a coincidence, put in place by Him</i>&rdquo;. Ramen!</p>

<div align="center"><a href="http://www.venganza.org"><img src="http://www.venganza.org/images/spreadword/th_jollyfish.jpg" alt="Do you believe?" /></a></div>


<p><em><em>Relax</em></em></p>

<p>&ldquo;Unintentionally sexual comic book covers: Part 1&rdquo;:<a href="http://www.thebestpageintheuniverse.net/c.cgi?u=uscc_part1:">http://www.thebestpageintheuniverse.net/c.cgi?u=uscc_part1:</a> If you know &ldquo;The Best Page In The Universe&rdquo;:<a href="http://maddox.xmission.com/">http://maddox.xmission.com/</a> you either love or hate Maddox. No matter to which group you belong, check out this collection of unintentionally sexual comic book covers and have a good laugh! (via <a href="http://hoodwink.d/onslaught/">hoodwink.d onslaught</a>)</p>

<p>&ldquo;The Website Development Process&rdquo;:<a href="http://www.pingmag.jp/2005/12/09/the-website-development-process/:">http://www.pingmag.jp/2005/12/09/the-website-development-process/:</a> Learn everything important there is to know about the process of developing a professional website from platic figurines. (via <a href="http://www.boingboing.net/2005/12/09/plastic_figurines_gu.html">BoingBoing</a>)</p>

<p>&ldquo;Squidoo&rdquo;:<a href="http://www.squidoo.com/:">http://www.squidoo.com/:</a> The developers of Squidoo thought that &ldquo;Everyone&rsquo;s an expert on something&rdquo;, so they decided to give all of us the opportunity to share our knowledge in the form of &ldquo;lenses&rdquo;. For all of you who are to lazy to look at the &ldquo;FAQ&rdquo;:<a href="http://www.squidoo.com/pages/faq">http://www.squidoo.com/pages/faq</a> to find out what a lense is, here&rsquo;s the answer: &ldquo;<I> A lens is one person&rsquo;s (lensmaster&rsquo;s) view on a topic he cares about. More specifically, a lens is a single web page filled with information and links that point to other web pages, to continually updated RSS feeds, or to relevant advertising. It&rsquo;s a place to start, not finish. </i>&rdquo;. Interesting concept, and there are some pretty cool lenses already. (via <a href="http://www.teemow.com/2005/12/07/squidoo/">teemow</a>).</p>

<p>Setting Orange, The Aftermath 53, 3171 YOLD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So what's the word? RUBY!]]></title>
    <link href="http://www.citizen428.net/blog/2005/11/18/so-whats-the-word-ruby/"/>
    <updated>2005-11-18T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2005/11/18/so-whats-the-word-ruby</id>
    <content type="html"><![CDATA[<p>This week I finally had a little more time to work on Gentoo related things again, so I commited some overdue packages to the tree.</p>

<p>The action started on Tuesday, when I commited the 20+ ebuilds from &ldquo;ruby-gnome-0.14.1&rdquo;:<a href="http://ruby-gnome2.sourceforge.jp/">http://ruby-gnome2.sourceforge.jp/</a> (mostly version bumps plus a few new packages like &ldquo;ruby-gtkmozembed&rdquo;:<a href="http://ruby-gnome2.sourceforge.jp/hiki.cgi?RubyZilla">http://ruby-gnome2.sourceforge.jp/hiki.cgi?RubyZilla</a>). Quite a lot of users have been waiting for this, as the previous version we had in the tree (0.12.0) didn&rsquo;t play nicely with GTK+ 2.8/GNOME 2.12. This problems are now sorted, so that quite a few bugs could be closed and marked fixed. :)</p>

<p>And then &ldquo;George released Nitro 0.25.0&rdquo;:<a href="http://www.gmosx.com/article/2">http://www.gmosx.com/article/2</a> yesterday, which found its way into the tree only hours later. This has mainly to do with the fact that I already had everything in place from the 0.24.0 release, which I then never commited because George said that there soon will be a release focussed on bug fixes and code clean-up. Apparently this has worked out nicely, so go ahaed, emerge &ldquo;Nitro&rdquo;:<a href="http://www.nitrohq.com/">http://www.nitrohq.com/</a> and play around with it, I&rsquo;m sure you&rsquo;ll like it.</p>

<p>In the evening &ldquo;we&rdquo;:<a href="http://aglug.net">http://aglug.net</a> had our montly Viennese Gentoo users meetup, which as always was really funny. I came home pretty late and my head still hurts, but it definitely was among the most entertaining evenings in the last few weeks. Thanks guys!</p>

<p>Boomtime, The Aftermath 30, 3171 YOLD</p>
]]></content>
  </entry>
  
</feed>
