<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | citizen428.blog()]]></title>
  <link href="http://www.citizen428.net/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://www.citizen428.net/"/>
  <updated>2015-04-07T12:11:05+07:00</updated>
  <id>http://www.citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[unsavory â€” get rid of stale Delicious bookmarks]]></title>
    <link href="http://www.citizen428.net/blog/2009/06/06/unsavory-%25e2%2580%2594-get-rid-of-stale-delicious-bookmarks/"/>
    <updated>2009-06-06T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2009/06/06/unsavory-%e2%80%94-get-rid-of-stale-delicious-bookmarks</id>
    <content type="html"><![CDATA[<p>While browsing through &ldquo;my Delicious bookmarks&rdquo;:<a href="http://delicious.com/citizen428">http://delicious.com/citizen428</a> the other day, I realized that over time I had accumulated quite a few dead links (about 5% of my collection). I then looked for a <em>simple</em> tool to automatically remove them, but couldn&rsquo;t find one that appealed to me, so I wrote my own script called <em>unsavory</em> which you can find on GitHub:</p>

<p>&ldquo;<a href="http://github.com/citizen428/unsavory/tree/master">http://github.com/citizen428/unsavory/tree/master</a>&rdquo;:<a href="http://github.com/citizen428/unsavory/tree/master">http://github.com/citizen428/unsavory/tree/master</a></p>

<p>It uses HTTParty to generate a list of all your bookmarks, which then get checked individually with Net::HTTP. Every link that returns an HTTP status code of 404 will automatically be removed (no questions asked, no undo), links with a status code other than 200 (OK) won&rsquo;t be changed but will display some information in case you want to fix them manually. Here&rsquo;s some example output (links anonymized for this post):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter Delicious username: citizen428
</span><span class='line'>  Enter Delicious password: *********&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  citizen428 has 664 bookmarks.
</span><span class='line'>  Processing URL #0001: OK
</span><span class='line'>  Processing URL #0002: OK
</span><span class='line'>  Processing URL #0003: OK
</span><span class='line'>  Processing URL #0004: OK
</span><span class='line'>  Processing URL #0005: OK
</span><span class='line'>  &hellip;
</span><span class='line'>  Processing URL #0013: 405: &lt;a href="http://...">http://...&lt;/a>
</span><span class='line'>  &hellip;
</span><span class='line'>  Processing URL #0074: 302: &lt;a href="http://...">http://...&lt;/a>
</span><span class='line'>  &hellip;
</span><span class='line'>  Processing URL #0086: Connection reset by peer &ndash; &lt;a href="https://...">https://...&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Not bad for under 60 lines of code. :&ndash;) I hope this is useful to some of you, I do have some features I plan on adding to this in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create your own (Ruby) API browser in 3 easy steps]]></title>
    <link href="http://www.citizen428.net/blog/2009/05/17/create-your-own-ruby-api-browser-in-3-easy-steps/"/>
    <updated>2009-05-17T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2009/05/17/create-your-own-ruby-api-browser-in-3-easy-steps</id>
    <content type="html"><![CDATA[<ul>
  <li><b>Step 1:</b> Download "Fluid":http://fluidapp.com/, an awesome little application to create site specific browsers.</li>
  <li><b>Step 2:</b> Find some online API documentation. For Ruby I recommend "railsapi.com":railsapi.com or "RubyBrains":http://rubybrains.com. </li>
  <li><b>Step 3:</b> Create your app in Fluid:</li>

<img src="http://citizen428.net/uploads/fluid.png" alt="Fluid" />
</ul>


<p>Here&rsquo;s an example screenshot of a site specific browser for RubyBrain.com:</p>

<p><img src="http://citizen428.net/uploads/fluid_rubybrain.png" alt="Fluid RubyBrain" /></p>

<p>Of course this still requires you to have a working internet connection, but you could always use a local version of the API docs when creating the app. On a related note you should also check out &ldquo;Goo&rdquo;:<a href="http://www.robinlu.com/blog/goo">http://www.robinlu.com/blog/goo</a> which is a nice alternative to gem server on OS X.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Fair Use Day!]]></title>
    <link href="http://www.citizen428.net/blog/2007/07/11/happy-fair-use-day/"/>
    <updated>2007-07-11T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2007/07/11/happy-fair-use-day</id>
    <content type="html"><![CDATA[<p>&ldquo;Fair Use Day&rdquo;:<a href="http://www.fairuseday.com/index.php/about-fairuse/">http://www.fairuseday.com/index.php/about-fairuse/</a></p>

<p>Boomtime, Confusion 46, 3173 YOLD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XPath (good|mad)ness]]></title>
    <link href="http://www.citizen428.net/blog/2007/01/04/xpath-goodmadness/"/>
    <updated>2007-01-04T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2007/01/04/xpath-goodmadness</id>
    <content type="html"><![CDATA[<p>Today I started writing a useful little &ldquo;Greasemonkey&rdquo;:<a href="http://greasemonkey.mozdev.org/">http://greasemonkey.mozdev.org/</a> &ldquo;userscript&rdquo;:<a href="http://userscripts.org/">http://userscripts.org/</a> for a &ldquo;browser-based MMRPG&rdquo;:<a href="http://www.pardus.at">http://www.pardus.at</a> I&rsquo;m playing. Although I&rsquo;m no JavaScript guru I feel somewhat confident in the language and am quite fond of &ldquo;XPath&rdquo;:<a href="http://www.w3.org/TR/xpath">http://www.w3.org/TR/xpath</a> ever since I joined the &ldquo;hoodwink.d&rdquo;:<a href="http://hoodwinkd.hobix.com/">http://hoodwinkd.hobix.com/</a> community.  Everything was going well, until I kind of hit a road block: selecting images whose src attribute contains a certain directory (e.g. &ldquo;funky&rdquo;) from a frame within a frameset. What sounds trivial at first cost me close to one and a half hours, but luckily enough I finally found a <a href="http://simile.mit.edu/mail/ReadMsg?listName=General&msgId=8502">solution</a>. To spare you the hassle, here&rsquo;s the working result:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var xpath = &ldquo;/html/frameset/frame[@name=&lsquo;main&rsquo;]&rdquo;;
</span><span class='line'>var frameResult = document.evaluate(xpath, document, null,
</span><span class='line'>   XPathResult.ANY_UNORDERED_NODE_TYPE,null).singleNodeValue;
</span><span class='line'>var document2 = frameResult.contentDocument;
</span><span class='line'>var imgResult = document2.evaluate(&ldquo;//img[contains(@src,&lsquo;funky&rsquo;)]&rdquo;, document2, null,
</span><span class='line'>  XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Of course if any of you know sbout a better way to achieve the same result, please don&rsquo;t hesitate to post a comment, thanks!</p>

<p>On a completely unrelated note: I&rsquo;m probably the last person to find out that &ldquo;Slashdot&rdquo;:<a href="http://sladhdot.org">http://sladhdot.org</a> features random Futurama quotes in its HTTP headers, but nonetheless I find it pretty cool to find stuff like &ldquo;X-Fry: The less fortunate get all the breaks!&rdquo; in there!</p>

<p>Setting Orange, Chaos 5, 3173 YOLD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loads of links]]></title>
    <link href="http://www.citizen428.net/blog/2005/12/10/loads-of-links/"/>
    <updated>2005-12-10T00:00:00+07:00</updated>
    <id>http://www.citizen428.net/blog/2005/12/10/loads-of-links</id>
    <content type="html"><![CDATA[<p>I haven&rsquo;t blogged for quite some time now, so I decided I could at least entertain you with one of my semi-regular link dumps until I&rsquo;m motivated enough to write a proper entry again&hellip;</p>

<p><em><em>Ruby</em></em></p>

<p>&ldquo;RadRails&rdquo;:<a href="http://www.radrails.org/:">http://www.radrails.org/:</a> From a rather recent mail on &ldquo;ruby-talk&rdquo;:<a href="http://blade.nagaokaut.ac.jp/ruby/ruby-talk/index.shtml">http://blade.nagaokaut.ac.jp/ruby/ruby-talk/index.shtml</a> I learned about RadRails, an IDE for (who would&rsquo;ve guessd) &ldquo;Ruby on Rails&rdquo;:<a href="http://www.rubyonrails.org/">http://www.rubyonrails.org/</a> which was built using the <a href="http://www.eclipse.org/rcp">Eclipse RCP</a>. Unfortunately I didn&rsquo;t have too much time to play with it yet, but so far it seems to be quite nice and if you&rsquo;re into Rails you maybe should have a look at this project.</p>

<p>&ldquo;eigenclass&rdquo;:<a href="http://eigenclass.org/:">http://eigenclass.org/:</a> Recently &ldquo;RedHanded&rdquo;:<a href="http://redhanded.hobix.com/">http://redhanded.hobix.com/</a> kept talking about Mauricio Fernandez' new blog called &ldquo;eigenclass&rdquo;, which talks about a lot of really interesting and advanced Ruby stuff. Definitely an interesting read for every serious Ruby programmer and everyone who wants to become one.</p>

<p>&ldquo;try ruby!&rdquo;:<a href="http://tryruby.hobix.com/:">http://tryruby.hobix.com/:</a> As I found out on &ldquo;poignant-stiffs&rdquo;:<a href="http://rubyforge.org/pipermail/poignant-stiffs/">http://rubyforge.org/pipermail/poignant-stiffs/</a> <a href="http://whytheluckystiff.net/">why</a> is at it again, which means there&rsquo;s something cool coming up. Despite not involving cartoon foxes or chunky bacon, &ldquo;try ruby&rdquo;:<a href="http://tryruby.hobix.com/">http://tryruby.hobix.com/</a> is still a really neat project, giving you the opportunity to interactively test Ruby from within your web browser. There&rsquo;s also a little tutorial, so this site may very well become the first stop to send Nubies to&hellip;</p>

<p><em><em>Disobey</em></em></p>

<p>&ldquo;The Hacktivist&rdquo;:<a href="http://www.thehacktivist.com/:">http://www.thehacktivist.com/:</a> Instead of summing up what the Hacktivist is all about, I&rsquo;ll just give you the self-description of the project: &ldquo;<i>The Hacktivist is dedicated to examining the theory and practice of hacktivism and electronic civil disobedience while contributing to the evolution of hacktivism by promoting constructive debate, effective direct action, and creative solutions to complex problems in order to facilitate positive change.</i>&rdquo; &ndash; Involve yourself!</p>

<p>&ldquo;The World&rsquo;s Most Populated Countries&rdquo;:<a href="http://www.odt.org/Pictures/poplcart.jpg:">http://www.odt.org/Pictures/poplcart.jpg:</a> Sometimes a new look on things helps changing your perspective in a positive way. That&rsquo;s why it&rsquo;s important to take a minute or two to think about this map of the Earth, where all the countries got resized in relation to their population.</p>

<p>&ldquo;Church of the Flying Spaghetti Monster&rdquo;:<a href="http://www.venganza.org/index.htm:">http://www.venganza.org/index.htm:</a> This comes from an open letter to the Kansas school board: &ldquo;<i> I am writing you with much concern after having read of your hearing to decide whether the alternative theory of Intelligent Design should be taught along with the theory of Evolution. [&hellip;]  Let us remember that there are multiple theories of Intelligent Design. I and many others around the world are of the strong belief that the universe was created by a Flying Spaghetti Monster. It was He who created all that we see and all that we feel. We feel strongly that the overwhelming scientific evidence pointing towards evolutionary processes is nothing but a coincidence, put in place by Him</i>&rdquo;. Ramen!</p>

<div align="center"><a href="http://www.venganza.org"><img src="http://www.venganza.org/images/spreadword/th_jollyfish.jpg" alt="Do you believe?" /></a></div>


<p><em><em>Relax</em></em></p>

<p>&ldquo;Unintentionally sexual comic book covers: Part 1&rdquo;:<a href="http://www.thebestpageintheuniverse.net/c.cgi?u=uscc_part1:">http://www.thebestpageintheuniverse.net/c.cgi?u=uscc_part1:</a> If you know &ldquo;The Best Page In The Universe&rdquo;:<a href="http://maddox.xmission.com/">http://maddox.xmission.com/</a> you either love or hate Maddox. No matter to which group you belong, check out this collection of unintentionally sexual comic book covers and have a good laugh! (via <a href="http://hoodwink.d/onslaught/">hoodwink.d onslaught</a>)</p>

<p>&ldquo;The Website Development Process&rdquo;:<a href="http://www.pingmag.jp/2005/12/09/the-website-development-process/:">http://www.pingmag.jp/2005/12/09/the-website-development-process/:</a> Learn everything important there is to know about the process of developing a professional website from platic figurines. (via <a href="http://www.boingboing.net/2005/12/09/plastic_figurines_gu.html">BoingBoing</a>)</p>

<p>&ldquo;Squidoo&rdquo;:<a href="http://www.squidoo.com/:">http://www.squidoo.com/:</a> The developers of Squidoo thought that &ldquo;Everyone&rsquo;s an expert on something&rdquo;, so they decided to give all of us the opportunity to share our knowledge in the form of &ldquo;lenses&rdquo;. For all of you who are to lazy to look at the &ldquo;FAQ&rdquo;:<a href="http://www.squidoo.com/pages/faq">http://www.squidoo.com/pages/faq</a> to find out what a lense is, here&rsquo;s the answer: &ldquo;<I> A lens is one person&rsquo;s (lensmaster&rsquo;s) view on a topic he cares about. More specifically, a lens is a single web page filled with information and links that point to other web pages, to continually updated RSS feeds, or to relevant advertising. It&rsquo;s a place to start, not finish. </i>&rdquo;. Interesting concept, and there are some pretty cool lenses already. (via <a href="http://www.teemow.com/2005/12/07/squidoo/">teemow</a>).</p>

<p>Setting Orange, The Aftermath 53, 3171 YOLD</p>
]]></content>
  </entry>
  
</feed>
