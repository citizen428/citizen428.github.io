<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mongodb | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2013-11-06T18:28:24+06:30</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fun With Twitter and MongoDB]]></title>
    <link href="http://citizen428.net/blog/2011/10/28/fun-with-twitter-and-mongodb/"/>
    <updated>2011-10-28T20:36:00+06:30</updated>
    <id>http://citizen428.net/blog/2011/10/28/fun-with-twitter-and-mongodb</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently reading the early access version of <a href="http://www.manning.com/banker/">MongoDB in Action</a>, so I felt like playing around with it a bit (in fact I do use it for <a href="http://happynerds.net">Happynerds.net</a>, but that&rsquo;s not very exciting). I then remembered that I recently stumbled upon a service called <a href="http://export.synack.me/">The Exporter</a>, which I had used to download all my tweets from Twitter (as of October 4th 2011). So why not use MongoDB to find out which users I retweet most often?</p>

<!-- more -->


<p>Since the data provided by The Exporter is already in JSON format, it should be really easy to import it using the <code>mongoimport</code> tool:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongoimport -d twitter -c tweets twitter-statuses-citizen428.json
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Alas this just threw a lot of errors at me and said that no records got imported. A quick look at the <a href="http://www.mongodb.org/display/DOCS/Import+Export+Tools">relevant documentation</a> shows that <code>mongoimport</code> expects one JSON object per line, so I had to remove the opening and closing bracket on the first and last line respectively, as well as the commas separating the lines (<code>s/,$//</code>). Once I did this, the import worked as expected and I had several thousand tweets in the collection <code>tweets</code> in the database <code>twitter</code>.</p>

<p>Since I&rsquo;ll most likely do similar imports in the future, I added a <a href="http://www.mongodb.org/display/DOCS/Indexes#Indexes-UniqueIndexes">unique index</a> on the field named <code>id</code> (note that this is different from Mongo&rsquo;s built in <code>_id</code>):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I also added a <a href="http://www.mongodb.org/display/DOCS/Indexes#Indexes-SparseIndexes">sparse index</a> on <code>in_reply_to_screen_name</code>, the most important field for what I was about to do:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span><span class="nx">in_reply_to_screen_name</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">sparse</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For getting the actual data I wanted, MongoDB&rsquo;s built-in <a href="http://www.mongodb.org/display/DOCS/MapReduce">map/reduce functionality</a> seemed like a perfect fit. Here&rsquo;s the mapping function, in all it&rsquo;s glory:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">m</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">emit</span><span class="p">({</span><span class="nx">user</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">in_reply_to_screen_name</span><span class="p">},</span> <span class="p">{</span><span class="nx">count</span><span class="o">:</span><span class="mi">1</span><span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The reduce step is equally simple:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">r</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">v</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span><span class="nx">count</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">count</span><span class="p">;});</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">count</span><span class="o">:</span><span class="nx">count</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To make the actual <code>mapReduce</code> invocation more readable, I decided to also save the query in a separate object:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">q</span> <span class="o">=</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">in_reply_to_screen_name</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">$ne</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="kc">null</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With all the pieces in place, I could run <code>mapReduce</code> to put the result in a new collection named <code>top_retweets</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">tweets</span><span class="p">.</span><span class="nx">mapReduce</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="p">{</span><span class="nx">out</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">top_retweets</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nx">query</span><span class="o">:</span> <span class="nx">q</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Querying the freshly created collection, sorting it in reverse order of <code>value.count</code> and limiting the result set to 10 elements gave me the top 10 users I retweet (note that this data is most likely not entirely accurate, since The Exporter only got me around 3.2k of the roughly 5k tweets I had at that time):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">top_retweets</span><span class="p">.</span><span class="nx">find</span><span class="p">({}).</span><span class="nx">sort</span><span class="p">({</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="p">.</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:-</span><span class="mi">1</span><span class="p">}).</span><span class="nx">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">user</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">MrJaba</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="p">},</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="mi">53</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/em&gt;id&amp;rdquo; : { &amp;ldquo;user&amp;rdquo; : &amp;ldquo;leyrer&amp;rdquo; }, &amp;ldquo;value&amp;rdquo; : { &amp;ldquo;count&amp;rdquo; : 52 } }</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">user</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">cypher</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="p">},</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="mi">38</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/em&gt;id&amp;rdquo; : { &amp;ldquo;user&amp;rdquo; : &amp;ldquo;MSch&amp;rdquo; }, &amp;ldquo;value&amp;rdquo; : { &amp;ldquo;count&amp;rdquo; : 34 } }</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">user</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">kewagi</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="p">},</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="mi">25</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/em&gt;id&amp;rdquo; : { &amp;ldquo;user&amp;rdquo; : &amp;ldquo;IORayne&amp;rdquo; }, &amp;ldquo;value&amp;rdquo; : { &amp;ldquo;count&amp;rdquo; : 23 } }</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">user</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">berenguel</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="p">},</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="mi">22</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/em&gt;id&amp;rdquo; : { &amp;ldquo;user&amp;rdquo; : &amp;ldquo;kaleidic&amp;rdquo; }, &amp;ldquo;value&amp;rdquo; : { &amp;ldquo;count&amp;rdquo; : 20 } }</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">id</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">user</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">antifuchs</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="p">},</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">:</span> <span class="mi">19</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/em&gt;id&amp;rdquo; : { &amp;ldquo;user&amp;rdquo; : &amp;ldquo;ofalk&amp;rdquo; }, &amp;ldquo;value&amp;rdquo; : { &amp;ldquo;count&amp;rdquo; : 19 } }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Hm, this is a collection I&rsquo;ll most likely query more in the future, how did the above query perform? Not so well I&rsquo;m afraid:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">top_retweets</span><span class="p">.</span><span class="nx">find</span><span class="p">({}).</span><span class="nx">sort</span><span class="p">({</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="p">.</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:-</span><span class="mi">1</span><span class="p">}).</span><span class="nx">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nx">explain</span><span class="p">();</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;cursor&quot;</span> <span class="o">:</span> <span class="s2">&quot;BasicCursor&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;nscanned&quot;</span> <span class="o">:</span> <span class="mi">192</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;nscannedObjects&quot;</span> <span class="o">:</span> <span class="mi">192</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;n&quot;</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;scanAndOrder&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;millis&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;nYields&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;nChunkSkips&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;isMultiKey&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;indexOnly&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The most important thing to note here is the difference between the number of documents (<code>nscanned</code>, 192) and the actual number returned (<code>n</code>, 10). Also the query had to order the result for us (indicated by <code>"scanAndOrder" : true</code>). Fortunately that&rsquo;s nothing another index can&rsquo;t fix, this time a reverse one on <code>value.count</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">top_retweets</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="p">.</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">});</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">top_retweets</span><span class="p">.</span><span class="nx">find</span><span class="p">({}).</span><span class="nx">sort</span><span class="p">({</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">value</span><span class="p">.</span><span class="nx">count</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:-</span><span class="mi">1</span><span class="p">}).</span><span class="nx">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nx">explain</span><span class="p">();</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;cursor&quot;</span> <span class="o">:</span> <span class="s2">&quot;BtreeCursor value.count_-1&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;nscanned&quot;</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;nscannedObjects&quot;</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;n&quot;</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;millis&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;nYields&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;nChunkSkips&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;isMultiKey&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;indexOnly&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;value.count&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;$maxElement&quot;</span> <span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;$minElement&quot;</span> <span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>All in all this was a pretty fun little exercise, that proves how easy it is to go from JSON to queryable data with MongoDB. I&rsquo;ll probably do more of this in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Sinatra, Heroku and MongoDB]]></title>
    <link href="http://citizen428.net/blog/2009/12/06/fun-with-sinatra-heroku-and-mongodb/"/>
    <updated>2009-12-06T00:00:00+06:30</updated>
    <id>http://citizen428.net/blog/2009/12/06/fun-with-sinatra-heroku-and-mongodb</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been toying around with the idea for a small website lately, but never actually got around to do it. In an attempt to clear out my personal to do list I finally motivated myself to start yesterday, and I have to say the following combination of tools is not only insanely efficient, but also really fun to work with:</p>

<ul>
<li><a href="http://www.sinatrarb.com/">Sinatra</a>, <i>&#8220;a DSL for quickly creating web applications in Ruby with minimal effort&#8221;</i>. I recommend using it in combination with <a href="http://mongrel.rubyforge.org/">Mongrel</a>, <a href="http://github.com/rtomayko/shotgun">Shotgun</a> and <a href="http://haml-lang.com/">Haml</a>.</li><br />
<li><a href="http://heroku.com/">Heroku</a>, a Ruby cloud hosting platform. Small sites are for free and Heroku&#8217;s git-based workflow just feels so natural. You can also <a href="http://docs.heroku.com/gems">manage your gem dependencies</a> and <a href="http://docs.heroku.com/config-vars">set up environment variables</a>, which made my life a whole lot easier.</li><br />
<li><a href="http://www.mongodb.org">MongoDB</a>, <i>&#8220;a scalable, high-performance, open source, schema-free, document-oriented database&#8221;</i>. In this specific case I used <a href="http://www.mongohq.com/home">MongoHQ</a> for the database hosting, since they were nice enough to provide me with a beta account. I stored all the connection information for MongoHQ in environment variables as described above:</p>
<script src="http://gist.github.com/250193.js?file=mongohq.rb"></script>
</ul>


<p>With this combination I was able to go from zero to mostly finished (I still need to write some of the content and make/steal a stylesheet) in very little time, while actually having fun! Thanks everybody for providing the Ruby community which such awesome tools! :&ndash;)</p>
]]></content>
  </entry>
  
</feed>
