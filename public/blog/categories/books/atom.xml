<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: books | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2012-06-24T20:39:22+02:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Review: The Tangled Web]]></title>
    <link href="http://citizen428.net/blog/2012/06/20/review-the-tangled-web/"/>
    <updated>2012-06-20T15:05:00+02:00</updated>
    <id>http://citizen428.net/blog/2012/06/20/review-the-tangled-web</id>
    <content type="html"><![CDATA[<p><em>Disclaimer 1: The good folks of No Starch Press were kind enough to provide me with a review copy of this book, but this did not influence the following text.</em></p>

<p><em>Disclaimer 2: Links to books are Amazon affiliate links.</em></p>

<p>I've been interested in IT security for a long time, but obviously even more so since I started working professionally in this area. Since web applications have become ubiquitous in recent years, they constitute a big part of our penetration testing work. This is a very broad topic, so <a href="http://www.amazon.com/gp/product/1593273886/ref=as_li_ss_tl?ie=UTF8&tag=citizen4blog-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1593273886">The Tangled Web: A Guide to Securing Modern Web Applications</a><img src="http://www.assoc-amazon.com/e/ir?t=citizen4blog-20&l=as2&o=1&a=1593273886" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> by Michal Zalewski is an ambitious project.</p>

<p>The first thing I noticed was that the book is comparatively thin. At around 300 pages it's only about one third of <a href="http://www.amazon.com/gp/product/1118026470/ref=as_li_ss_tl?ie=UTF8&tag=citizen4blog-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1118026470">The Web Application Hacker's Handbook: Finding and Exploiting Security Flaws</a><img src="http://www.assoc-amazon.com/e/ir?t=citizen4blog-20&l=as2&o=1&a=1118026470" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />. Don't let that fool you though, this book is not a lightweight by any means. It's logically structured in three parts, the first of which explores the various components that constitute the web as we know it today (URLs, HTTP, HTML, CSS etc.) and their security implications. This is followed by a look at the security features — and their shortcomings — of current browsers. After this part 3 deals with current developments and the future of browser and web application security. This is rounded off by a list of common security problems including references to the chapters of the book that cover them, as well as an epilogue with a surprisingly philosophical outlook on IT security and trust in human societies.</p>

<p>The writing was clear and to the point, with tons of footnotes and references to provide the interested reader with the chance to further research the presented topics. The author clearly knows what he's talking about and manages to present it in a very approachable way. Due to it's limited size the book still has to be a bit dense though, so I never really felt like reading more than one chapter at a time, otherwise it'd have been to much information to take in at once.</p>

<p>Whether you work in IT security or are a web application developer, this definitely is a book you don't want to miss.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Overload 2012-02-26]]></title>
    <link href="http://citizen428.net/blog/2012/02/26/information-overload-2012-02-26/"/>
    <updated>2012-02-26T00:00:00+01:00</updated>
    <id>http://citizen428.net/blog/2012/02/26/information-overload-2012-02-26</id>
    <content type="html"><![CDATA[<p><blockquote><p>To us, the Web is a sort of shared external memory. We do not have to remember unnecessary details: dates, sums, formulas, clauses, street names, detailed definitions. It is enough for us to have an abstract, the essence that is needed to process the information and relate it to others.</p><footer><strong>Piotr Czerski (translated by Marta Szreder)</strong> <cite><a href='http://pastebin.com/0xXV8k7k'>We, the Web Kids</a></cite></footer></blockquote></p>

<ul>
<li><a href="http://pastebin.com/0xXV8k7k">We, the Web Kids</a><br>While I'm probably a bit too old to qualify as a "web kid", I agree with most of this post.</li>
<li><a href="http://www.newyorker.com/reporting/2009/03/09/090309fa_fact_max?currentPage=all">The Unfinished</a><br>This very long article on David Foster Wallace is not only interesting, but also serves as a reminder to myself to finally read <a href="http://www.amazon.com/gp/product/0316066524/ref=as_li_ss_tl?ie=UTF8&amp;tag=citizen4blog-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0316066524">Infinite Jest</a> (affiliate link).</li>
<li><a href="http://www.antipope.org/charlie/blog-static/2012/02/life-with-and-without-animated.html">Life With and Without Animated Ducks: The Future Is Gender Distributed</a><br>Sexism shows in many ways, I hadn't really considered this angle before.</li>
<li><a href="http://www.mercurynews.com/ci_16291970">Craig Silverstein, Google's first employee</a><br>An interview with Google's first employee. This is a bit older, but still interesting.</li>
<li><a href="http://www.wired.com/wiredscience/2011/10/why-do-some-people-learn-faster-2/">Why Do Some People Learn Faster?</a><br>Articles about the brain and/or learning make a regular appearance in this blog series, here we go for another one.</li>
<li><a href="http://grist.org/living/dont-hate-the-player-how-fun-and-games-can-encourage-sustainable-choices/">Don’t hate the player: How fun and games can encourage sustainable choices</a><br>I like the example encouragements shown in this article.</li>
<li><a href="http://www.zeit.de/wissen/gesundheit/2012-02/geboren-2012-ernaehrung">Essen 2032: Da sagt der Kühlschrank etwas anderes </a><br>One thing I like about articles trying to predict the future is imagining how naive they will look later (in German).</li>
<li><a href="http://techcrunch.com/2012/02/13/bittorrent-live/">BitTorrent Live: Cheap, Real-Time P2P Video Streaming That Will Kill TV</a><br>In case you missed this last week.</li>
<li><a href="http://exclaim.ca/Features/Timeline/leonard_cohen-beautiful_loser">Leonard Cohen — Beautiful Loser</a><br>A timeline of Leonard Cohen's life.</li>
<li><a href="http://www.good.is/post/regulators-mount-up-what-happens-to-the-coke-in-coca-cola/">What Happens to the Coke in Coca-Cola?</a><br>Coca-Cola is still made with coca leaves, but happens to the cocaine in them? Read this article to find out.</li>
</ul>


<p><blockquote><p>The future is not evenly distributed. Not along cultural lines, along language lines, along political, economic, class, or generational lines. And most certainly not along gender lines.</p><footer><strong>Cat Valente</strong> <cite><a href='http://www.antipope.org/charlie/blog-static/2012/02/life-with-and-without-animated.html'>Life With and Without Animated Ducks: The Future Is Gender Distributed</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: A Bug Hunter's Diary]]></title>
    <link href="http://citizen428.net/blog/2012/02/01/review-a-bug-hunters-diary/"/>
    <updated>2012-02-01T22:03:00+01:00</updated>
    <id>http://citizen428.net/blog/2012/02/01/review-a-bug-hunters-diary</id>
    <content type="html"><![CDATA[<p>This was a very good read! In each chapter the author introduces one bug he found in a popular software package, always following the same structure: discovery, exploitation, remediation, lessons learned from the bug and a timeline of the bug's lifetime (disclosure, fix, etc).</p>

<p>The writing is engaging and to the point, but still contains a lot of technical detail. Be warned though, if reading C and disassembly is not your type of thing, you probably won't enjoy this too much. The author tries hard to make everything as easy to understand as possible, but there's only so much you can do with limited space.</p>

<p>If there's anything to criticize about this book, it's that the chapters are fairly repetitive, so I never really felt like reading more than one in a single sitting. But then it's also not the type of book that needs to be read cover to cover as fast as possible.</p>

<p>Link: <a href="http://www.amazon.com/gp/product/1593273851/ref=as_li_ss_tl?ie=UTF8&tag=citizen4blog-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1593273851">Tobias Klein: A Bug Hunter's Diary</a> (Amazon affiliate link)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011 reading list]]></title>
    <link href="http://citizen428.net/blog/2011/12/28/2011-reading-list/"/>
    <updated>2011-12-28T20:50:00+01:00</updated>
    <id>http://citizen428.net/blog/2011/12/28/2011-reading-list</id>
    <content type="html"><![CDATA[<p>A list of the books I read in 2011, sorted by finishing date (oldest to newest). According to <a href="http://goodreads.com">Goodreads</a> that’s roughly 16.2k pages, less than the last few years. I also have a couple of unfinished books, read several <a href="http://citizen428.net/blog/categories/papers/">papers</a> and a couple of chapters of a book on Ruby and MongoDB that I'm the technical reviewer for.</p>

<p>Terry Pratchett: <strong>Hogfather</strong><br>
Michael Köhlmeier: <strong>Sunrise</strong><br>
Terry Pratchett: <strong>Eric</strong><br>
Audrey Niffenegger: <strong>Her Fearful Symmetry</strong><br>
Conrad Barski: <strong>Land of Lisp</strong><br>
Arthur Nersesian: <strong>The Fuck-Up</strong><br>
Ryszard Kapuściński: <strong>The Shadow of the Sun</strong><br>
Jacqueline Rayner: <strong>Doctor Who: The Sontaran Games</strong><br>
Gregory Brown: <strong>Ruby Best Practices</strong><br>
L. Frank Baum: <strong>The Wonderful Wizard of Oz</strong><br>
Paolo Bacigalupi: <strong>The Windup Girl</strong><br>
Cory Doctorow: <strong>Eastern Standard Tribe</strong><br>
Canol Gökel: <strong>Computer Programming using GNU Smalltalk</strong><br>
Jeremy Leipzig: <strong>Data Mashups with R</strong><br>
Lana Citron: <strong>Transit</strong><br>
Suzanne Skublics: <strong>Smalltalk With Style</strong><br>
Russ Olsen: <strong>Eloquent Ruby</strong><br>
Dennis Lehane: <strong>Shutter Island</strong><br>
Terrance Dicks: <strong>Doctor Who: Made of Steel</strong><br>
Christian Bök: <strong>Eunoia</strong><br>
Chuck Palahniuk: <strong>Invisible Monsters</strong><br>
Radek Knapp: <strong>Franio</strong><br>
Michael Fogus: <strong>The Joy of Clojure</strong><br>
Terry Pratchett: <strong>Mort</strong><br>
Dan Cederholm: <strong>Handcrafted CSS: More Bulletproof Web Design</strong><br>
Paolo Perrotta: <strong>Metaprogramming Ruby</strong><br>
Mark Bowden: <strong>Killing Pablo: The Hunt for the World's Greatest Outlaw</strong><br>
Cormac McCarthy: <strong>The Road</strong><br>
Charles Stross: <strong>Accelerando</strong><br>
Gautam Malkani: <strong>Londonstani</strong><br>
Armin Risi: <strong>Vegetarisch leben - Die Vorteile einer fleischlosen Ernährung</strong><br>
Miran Lipovača: <strong>Learn You a Haskell for Great Good!: A Guide for Beginners</strong><br>
Robert J. Chassell: <strong>An Introduction to Programming in Emacs Lisp</strong><br>
Hunter S. Thompson: <strong>Hell's Angels</strong><br>
Lauren Beukes: <strong>Moxyland</strong><br>
Raphael Selbourne: <strong>Beauty</strong><br>
Zed A. Shaw: <strong>Learn Python The Hard Way</strong><br>
David Kennedy: <strong>Metasploit: The Penetration Tester's Guide</strong><br>
Paolo Bacigalupi: <strong>Pump Six</strong><br>
Michael Moorcock: <strong>The Nomad of Time</strong><br>
Russ Olsen: <strong>Design Patterns in Ruby</strong><br>
David Mark: <strong>Beginning iPhone 4 Development: Exploring the iOS SDK</strong><br>
Reijo Mäki: <strong>Tango Negro</strong><br>
David Sedaris: <strong>Me Talk Pretty One Day</strong><br>
Kurt Vonnegut: <strong>Breakfast of Champions</strong><br>
Mario Vargas Llosa: <strong>Der Geschichtenerzähler</strong><br>
Kyle Banker: <strong>MongoDB in Action</strong><br>
Scott Kenemore: <strong>Zombie, Ohio: A Tale of the Undead</strong><br>
Leopold Kohr: <strong>The Breakdown of Nations</strong><br>
Carlos Bueno: <strong>Lauren Ipsum</strong><br>
Henning Mankell: <strong>Mannen på stranden</strong><br>
Garrison Keillor: <strong>Was ist eigentlich Anarchie?</strong><br>
Thomas Pynchon: <strong>Gravity's Rainbow</strong><br>
Norman Matloff: <strong>The Art of R Programming</strong><br>
Stéphane Hessel: <strong>Empört Euch!</strong><br>
Fabian Kruse: <strong>Beyond Rules</strong><br>
Dario Tonani: <strong>Cardanica (A Steampunk Nightmare)</strong><br>
Ryū Murakami: <strong>In The Miso Soup</strong><br>
Kaaron Warren: <strong>The Grinding House</strong><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: The Art of R Programming]]></title>
    <link href="http://citizen428.net/blog/2011/12/21/review-the-art-of-r-programming/"/>
    <updated>2011-12-21T20:06:00+01:00</updated>
    <id>http://citizen428.net/blog/2011/12/21/review-the-art-of-r-programming</id>
    <content type="html"><![CDATA[<p><em>Disclaimer: Once again No Starch Press were kind enough to provide me with a review copy of a book, but this does not influence my reviews.</em></p>

<p>Time for another book review, this time <a href="http://nostarch.com/artofr.htm">The Art of R Programming</a> by Norman Matloff. First things first, this book really lives up to its name! It's a thorough introduction to programming in R, aimed at software developers. This is <strong>not</strong> the book for you if you want to learn about the statistics side of R or how to make prettier plots, there are plenty of books about that anyway.</p>

<p>What I really like is that the author never tries to "sell" R to the reader. This is rather refreshing, because I always get turned off when books start with a sales pitch for something I already clearly showed interest in by purchasing the book. R is a rather specialized language and chances are that you know why you want to solve a given problem in it, and if you don't, this might not yet be the book you should be reading anyway. The first few chapters cover the language's basic data structures like vectors, matrices, arrays, lists and tables, before chapter 7 introduces various flow control structures. What follows is a chapter on doing math and simulations in R, which is not overly long but gives some good examples of what the language is useful for. The next chapter is very interesting, it deals with R's object oriented features and describes the differences between S3 and S4 classes as well as their respective up and down sides. After this the author covers input/output, dealing with strings and R's graphing capabilities. He never gets lost in detail, but provides you with enough info to be able to explore these areas on your own. What really makes the book special though are the last few chapters, where Matloff covers debugging (a topic he also wrote an entire book about), performance tradeoffs, interfacing R with other programming languages (using functions written in C/C++ from R, as well as using R in Python) and various approaches to parallelizing R. While none of this may sound super exciting at first — apart from parallelism maybe — these are important issues in the daily lives of software developers and way too many books only gloss over them.</p>

<p>Now for some criticism: personally I don't find the author's style very engaging, it's rather dry and boring at times. Since it's clear that Matloff is an absolute authority on the topic of R this doesn't way too heavily, but still deserves a mention. Also for my personal taste there are slightly too many forward references in the text, although that's hard to avoid if you want to properly cover a language. I also found it rather odd that at one point the author mentions that explicit return statements aren't exactly idiomatic in R, but that he will keep using them for the benefit of readers unaccustomed to the language. Given that this was a few chapters in, it would have been a perfect spot to switch to the more idiomatic style from then on, but maybe that's just me being nitpicky. I also noticed several little typos and misspellings, something I'm not really used to from No Starch Press.</p>

<p>All in all this is a very solid book, which you definitely should pick up if you want to learn programming in R!</p>
]]></content>
  </entry>
  
</feed>
