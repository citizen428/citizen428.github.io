<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2012-09-16T20:03:20+02:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby and HTTParty: GitHub issues to CSV]]></title>
    <link href="http://citizen428.net/blog/2010/10/07/ruby-and-httparty-github-issues-to-csv/"/>
    <updated>2010-10-07T00:00:00+02:00</updated>
    <id>http://citizen428.net/blog/2010/10/07/ruby-and-httparty-github-issues-to-csv</id>
    <content type="html"><![CDATA[<p>To fill our backlog at work, our project manager needed a list of our current <a href="https://github.com/">GitHub</a> issues, ideally in a spreadsheet format. A couple lines of Ruby produce CSV output consisting of issue title, creation date, reporter and labels, which then can be redirected to a file and opened with any spreadsheet program.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class GitHubIssues</span>
</span><span class='line'><span class="sr">  include HTTParty</span>
</span><span class='line'><span class="sr">  base_uri &#39;http:/</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">api</span><span class="o">/</span><span class="n">v2</span><span class="o">/</span><span class="n">yaml</span><span class="s1">&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;  def self.show&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;# username must be of the form &#39;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">username</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">/</span><span class="n">token</span><span class="ss">:&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">token</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">opts = {:basic_auth =&amp;gt; {:username =&amp;gt; &#39;&#39;}}</span>
</span><span class='line'><span class="s1">self.get(&#39;</span><span class="o">/</span><span class="n">issues</span><span class="o">/</span><span class="n">list</span><span class="o">/&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">user</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">projects</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">/</span><span class="nb">open</span><span class="s1">&#39;, opts)[&quot;issues&quot;].each do |issue|</span>
</span><span class='line'><span class="s1">  puts &quot;#{issue[&quot;title&quot;]};#{issue[&quot;created_at&quot;]};#{issue[&quot;user&quot;]};#{issue[&quot;labels&quot;].join(&#39;</span><span class="p">,</span><span class="err">&#39;</span><span class="p">)}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span><span class='line'><span class="s2">end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;GitHubIssues.show</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's quick and dirty (e.g. will die if there are no issues), but does exactly what we needed in just a couple of lines thanks to the awesome <a href="http://github.com/jnunemaker/httparty">HTTParty</a>.</p>

<p><i>This also has been <a href="http://tupalo.com/en/blog/github-issues-as-csv-with-ruby-and-httparty/">published</a> in slightly different form on our <a href="http://tupalo.com/en/blog/">company blog</a>.</i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's new pussycat?]]></title>
    <link href="http://citizen428.net/blog/2009/10/06/whats-new-pussycat/"/>
    <updated>2009-10-06T00:00:00+02:00</updated>
    <id>http://citizen428.net/blog/2009/10/06/whats-new-pussycat</id>
    <content type="html"><![CDATA[<p>Quite a bit actually:<ul>
<li>I live in Vienna again. Seriously.</li>
<li>I started my new job as IT systems engineer at <a href="http://www.nessus.at/">Nessus</a>. <b>Update</b>: That was October. In November I changed job and now work for <a href="http://matrixware.com">Matrixware</a> </li>
<li><a href="http://github.com/citizen428/ClojureX">ClojureX</a> got mentioned in the <a href="http://github.com/citizen428/ClojureX">latest GitHub rebase</a>, yeah!</li>
<li><a href="http://github.com/citizen428/unsavory">unsavory</a> is now also available on <a href="http://gemcutter.org/">Gemcutter</a>, so get it while it&#8217;s hot (Disclaimer: product may not be as hot as advertised, YMMV).</li>
<li><a href="http://rubylearning.org">RubyLearning</a> started a <a href="http://rubylearning.com/blog/2009/09/20/rpcfn-ruby-programming-challenge-for-newbies/">Ruby Programming Challenge for Newbies</a> and I&#8217;m part of the jury. The <a href="http://rubylearning.com/blog/2009/09/24/rpcfn-shift-subtitle-1/">first challenge</a> was provided by <a href="http://www.akitaonrails.com/">Fabio Akita</a> and saw quite a lot of participants. I also wrote a quick <a href="http://github.com/citizen428/rubylearning/blob/master/rpcfn/01subtitles/subtitles.rb">example solution</a>.</li>
</ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unsavory now available as gem]]></title>
    <link href="http://citizen428.net/blog/2009/09/08/unsavory-now-available-as-gem/"/>
    <updated>2009-09-08T00:00:00+02:00</updated>
    <id>http://citizen428.net/blog/2009/09/08/unsavory-now-available-as-gem</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/citizen428/unsavory/tree/master">unsavory</a> is now available as a gem, which means that you can comfortably install it like this:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem sources -a http://gems.github.com
</span><span class='line'>$ sudo gem install citizen428-unsavory</span></code></pre></td></tr></table></div></figure></notextile></div>
Rubygems will automatically create a wrapper-script named "unsavory", which you can use to start the program so you finally can get rid of all these outdated bookmarks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy setup for Clojure on Mac OS X Leopard]]></title>
    <link href="http://citizen428.net/blog/2009/08/24/easy-setup-for-clojure-on-mac-os-x-leopard/"/>
    <updated>2009-08-24T00:00:00+02:00</updated>
    <id>http://citizen428.net/blog/2009/08/24/easy-setup-for-clojure-on-mac-os-x-leopard</id>
    <content type="html"><![CDATA[<p>"Clojure":http://clojure.org/ definitely is one of the hottest new programming languages around and just recently hit a "very important milestone":http://clojure.blogspot.com/2009/05/clojure-10.html. Setting up a nice Clojure development environment on OS X still can be a bit of a pain though, which can be seen by the number of HOWTOs and installation notes floating around on the web. I therefore decided to expand "one of those":http://github.com/carlism/Clojure-MacOSX/tree into "ClojureX":http://github.com/citizen428/ClojureX/tree/master, which I believe is the easiest way to get up to speed with Clojure development on Leopard.</p>

<p>ClojureX can</p>

<ul>
<li> download and build the source code for Clojure, "clojure-contrib":http://github.com/richhickey/clojure-contrib/tree/master and "JLine":http://jline.sourceforge.net/ (a readline like library for Java)</li>

<li> download editor support packages for TextMate and Emacs</li>

<li> create a symlink for the Clojure startup script in /usr/local/bin</li>

<li> install support for TextMate via the <a href="http://github.com/stephenroller/clojure-tmbundle/tree/master">clojure-tmbundle</a></li>

<li> configure Emacs to use "clojure-mode":http://github.com/jochu/clojure-mode/tree/master, "Slime":http://common-lisp.net/project/slime/ and <a href="http://github.com/jochu/swank-clojure/tree/master">swank-clojure</a></li>

<li> keep your Clojure installation up to date via a simple "git submodule update && ant"</li>
</ul>


<p>I hope this will come in handy for other people interested in trying out Clojure on Mac OS X, if you have any feedback please post it in the comment section.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweet active Safari tab from command line]]></title>
    <link href="http://citizen428.net/blog/2009/02/27/tweet-active-safari-tab-from-command-line/"/>
    <updated>2009-02-27T00:00:00+01:00</updated>
    <id>http://citizen428.net/blog/2009/02/27/tweet-active-safari-tab-from-command-line</id>
    <content type="html"><![CDATA[<p>Tweeting the URL of the article you are currently reading can be quite cumbersome: start your Twitter client if it isn't already running, copy  the URL, shorten it, paste it into the client...</p>

<p>I therefore wrote a little Ruby script I can call from the command line and which will do all this annoying work for me. As an added bonus you can pass in hashtags as command line parameters. It's just a quick and dirty hack, feel free to change it according to your needs... :-)</p>

<script src="http://gist.github.com/71559.js"></script>

]]></content>
  </entry>
  
</feed>
