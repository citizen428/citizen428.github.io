<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | citizen428.blog()]]></title>
  <link href="http://citizen428.net/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://citizen428.net/"/>
  <updated>2013-09-01T23:23:22+08:00</updated>
  <id>http://citizen428.net/</id>
  <author>
    <name><![CDATA[Michael Kohl]]></name>
    <email><![CDATA[citizen428@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby and HTTParty: GitHub issues to CSV]]></title>
    <link href="http://citizen428.net/blog/2010/10/07/ruby-and-httparty-github-issues-to-csv/"/>
    <updated>2010-10-07T00:00:00+08:00</updated>
    <id>http://citizen428.net/blog/2010/10/07/ruby-and-httparty-github-issues-to-csv</id>
    <content type="html"><![CDATA[<p>To fill our backlog at work, our project manager needed a list of our current <a href="https://github.com/">GitHub</a> issues, ideally in a spreadsheet format. A couple lines of Ruby produce CSV output consisting of issue title, creation date, reporter and labels, which then can be redirected to a file and opened with any spreadsheet program.</p>

<p>{% codeblock lang:ruby %}
require &lsquo;httparty&rsquo;</p>

<p>class GitHubIssues
  include HTTParty
  base_uri &lsquo;<a href="http://github.com/api/v2/yaml">http://github.com/api/v2/yaml</a>&rsquo;</p>

<p>  def self.show</p>

<pre><code># username must be of the form '&lt;username&gt;/token:&lt;token&gt;'
opts = {:basic_auth =&gt; {:username =&gt; ''}}
self.get('/issues/list/&lt;user&gt;/&lt;projects&gt;/open', opts)["issues"].each do |issue|
  puts "#{issue["title"]};#{issue["created_at"]};#{issue["user"]};#{issue["labels"].join(',')}"
end
</code></pre>

<p>  end
end</p>

<p>GitHubIssues.show
{% endcodeblock %}</p>

<p>It&rsquo;s quick and dirty (e.g. will die if there are no issues), but does exactly what we needed in just a couple of lines thanks to the awesome <a href="http://github.com/jnunemaker/httparty">HTTParty</a>.</p>

<p><i>This also has been <a href="http://tupalo.com/en/blog/github-issues-as-csv-with-ruby-and-httparty/">published</a> in slightly different form on our <a href="http://tupalo.com/en/blog/">company blog</a>.</i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's new pussycat?]]></title>
    <link href="http://citizen428.net/blog/2009/10/06/whats-new-pussycat/"/>
    <updated>2009-10-06T00:00:00+08:00</updated>
    <id>http://citizen428.net/blog/2009/10/06/whats-new-pussycat</id>
    <content type="html"><![CDATA[<p>Quite a bit actually:<ul>
<li>I live in Vienna again. Seriously.</li>
<li>I started my new job as IT systems engineer at <a href="http://www.nessus.at/">Nessus</a>. <b>Update</b>: That was October. In November I changed job and now work for <a href="http://matrixware.com">Matrixware</a> </li>
<li><a href="http://github.com/citizen428/ClojureX">ClojureX</a> got mentioned in the <a href="http://github.com/citizen428/ClojureX">latest GitHub rebase</a>, yeah!</li>
<li><a href="http://github.com/citizen428/unsavory">unsavory</a> is now also available on <a href="http://gemcutter.org/">Gemcutter</a>, so get it while it&#8217;s hot (Disclaimer: product may not be as hot as advertised, YMMV).</li>
<li><a href="http://rubylearning.org">RubyLearning</a> started a <a href="http://rubylearning.com/blog/2009/09/20/rpcfn-ruby-programming-challenge-for-newbies/">Ruby Programming Challenge for Newbies</a> and I&#8217;m part of the jury. The <a href="http://rubylearning.com/blog/2009/09/24/rpcfn-shift-subtitle-1/">first challenge</a> was provided by <a href="http://www.akitaonrails.com/">Fabio Akita</a> and saw quite a lot of participants. I also wrote a quick <a href="http://github.com/citizen428/rubylearning/blob/master/rpcfn/01subtitles/subtitles.rb">example solution</a>.</li>
</ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unsavory now available as gem]]></title>
    <link href="http://citizen428.net/blog/2009/09/08/unsavory-now-available-as-gem/"/>
    <updated>2009-09-08T00:00:00+08:00</updated>
    <id>http://citizen428.net/blog/2009/09/08/unsavory-now-available-as-gem</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/citizen428/unsavory/tree/master">unsavory</a> is now available as a gem, which means that you can comfortably install it like this:
{% codeblock %}
$ gem sources -a <a href="http://gems.github.com">http://gems.github.com</a>
$ sudo gem install citizen428-unsavory
{% endcodeblock %}
Rubygems will automatically create a wrapper-script named &ldquo;unsavory&rdquo;, which you can use to start the program so you finally can get rid of all these outdated bookmarks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy setup for Clojure on Mac OS X Leopard]]></title>
    <link href="http://citizen428.net/blog/2009/08/24/easy-setup-for-clojure-on-mac-os-x-leopard/"/>
    <updated>2009-08-24T00:00:00+08:00</updated>
    <id>http://citizen428.net/blog/2009/08/24/easy-setup-for-clojure-on-mac-os-x-leopard</id>
    <content type="html"><![CDATA[<p>&ldquo;Clojure&rdquo;:<a href="http://clojure.org/">http://clojure.org/</a> definitely is one of the hottest new programming languages around and just recently hit a &ldquo;very important milestone&rdquo;:<a href="http://clojure.blogspot.com/2009/05/clojure-10.html.">http://clojure.blogspot.com/2009/05/clojure-10.html.</a> Setting up a nice Clojure development environment on OS X still can be a bit of a pain though, which can be seen by the number of HOWTOs and installation notes floating around on the web. I therefore decided to expand &ldquo;one of those&rdquo;:<a href="http://github.com/carlism/Clojure-MacOSX/tree">http://github.com/carlism/Clojure-MacOSX/tree</a> into &ldquo;ClojureX&rdquo;:<a href="http://github.com/citizen428/ClojureX/tree/master,">http://github.com/citizen428/ClojureX/tree/master,</a> which I believe is the easiest way to get up to speed with Clojure development on Leopard.</p>

<p>ClojureX can</p>

<ul>
<li> download and build the source code for Clojure, "clojure-contrib":http://github.com/richhickey/clojure-contrib/tree/master and "JLine":http://jline.sourceforge.net/ (a readline like library for Java)</li>

<li> download editor support packages for TextMate and Emacs</li>

<li> create a symlink for the Clojure startup script in /usr/local/bin</li>

<li> install support for TextMate via the <a href="http://github.com/stephenroller/clojure-tmbundle/tree/master">clojure-tmbundle</a></li>

<li> configure Emacs to use "clojure-mode":http://github.com/jochu/clojure-mode/tree/master, "Slime":http://common-lisp.net/project/slime/ and <a href="http://github.com/jochu/swank-clojure/tree/master">swank-clojure</a></li>

<li> keep your Clojure installation up to date via a simple "git submodule update && ant"</li>
</ul>


<p>I hope this will come in handy for other people interested in trying out Clojure on Mac OS X, if you have any feedback please post it in the comment section.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweet active Safari tab from command line]]></title>
    <link href="http://citizen428.net/blog/2009/02/27/tweet-active-safari-tab-from-command-line/"/>
    <updated>2009-02-27T00:00:00+08:00</updated>
    <id>http://citizen428.net/blog/2009/02/27/tweet-active-safari-tab-from-command-line</id>
    <content type="html"><![CDATA[<p>Tweeting the URL of the article you are currently reading can be quite cumbersome: start your Twitter client if it isn&rsquo;t already running, copy  the URL, shorten it, paste it into the client&hellip;</p>

<p>I therefore wrote a little Ruby script I can call from the command line and which will do all this annoying work for me. As an added bonus you can pass in hashtags as command line parameters. It&rsquo;s just a quick and dirty hack, feel free to change it according to your needs&hellip; :&ndash;)</p>

<script src="http://gist.github.com/71559.js"></script>

]]></content>
  </entry>
  
</feed>
