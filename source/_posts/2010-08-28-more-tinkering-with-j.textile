---
layout: post
title: More tinkering with J
date: 2010-8-28
comments: true
categories: []

---
Since my "previous post":http://citizen428.net/archives/436 on APL and J I've read the 45 or so pages of  "Easy J":http://www.jsoftware.com/books/pdf/easyj.pdf and am quite impressed by this nifty language. It may seem strange at first, but is very logically structured and not difficult to understand at all. That said I still need to constantly have the "vocabulary":http://www.jsoftware.com/help/dictionary/vocabul.htm open to write anything remotely useful, but I'm slowly starting to remember more and more of it.

Here are a couple of examples of J's expressiveness, with the first two based on exercises from our "Core Ruby" course on <a href="http://www.rubylearning.org/class/">RubyLearning.org</a>.

<em>How old is a person if he/she is 1 billion seconds old?</em>
{% codeblock %}
  0 365 24 60 60 #: 1000000000
31 259 1 46 40
{% endcodeblock %}
Using <a href="http://www.jsoftware.com/help/dictionary/d402.htm">Antibase</a> (#:) it's easy to see that the answer is 31 years, 259 days, 1 hour, 46 minutes and 40 seconds.

<em>Convert degress Fahrenheit to degrees Celsius.</em>
{% codeblock %}
  toc =: %&1.8@-&32
  toc 100
37.7778
{% endcodeblock %}

Divide by 1.8 after (<a href="http://www.jsoftware.com/help/dictionary/d620.htm">Atop</a>,  @) subtracting 32. I suspect there's a better way to write this, but it's the first thing that came to my mind...

<em>Create a sorted set from a list of numbers.</em>
{% codeblock %}
  toset =: ({~/:)@~.
  toset 3 4 1 2 4 2 3 5
1 2 3 4 5
{% endcodeblock %}

Sort (<a href="http://www.jsoftware.com/help/dictionary/d422.htm">/:</a>) the distinct items (<a href="http://www.jsoftware.com/help/dictionary/d221.htm">nub</a>) of the list. Don't concern yourself too much with the passive (<a href="http://www.jsoftware.com/help/dictionary/d220v.htm">~</a>) for now, it's just there so the arguments to <a href="http://www.jsoftware.com/help/dictionary/d521.htm">take</a> end up in the right spot.

That's it for today, in my next post on J I want to focus on the language's excellent plotting capabilities.
